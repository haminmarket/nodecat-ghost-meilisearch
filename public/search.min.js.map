{"version":3,"file":"search.min.js","sources":["../../../node_modules/meilisearch/dist/esm/errors/meilisearch-error.js","../../../node_modules/meilisearch/dist/esm/errors/meilisearch-api-error.js","../../../node_modules/meilisearch/dist/esm/errors/meilisearch-request-error.js","../../../node_modules/meilisearch/dist/esm/errors/meilisearch-timeout-error.js","../../../node_modules/meilisearch/dist/esm/errors/version-hint-message.js","../../../node_modules/meilisearch/dist/esm/utils.js","../../../node_modules/meilisearch/dist/esm/http-requests.js","../../../node_modules/meilisearch/dist/esm/enqueued-task.js","../../../node_modules/meilisearch/dist/esm/task.js","../../../node_modules/meilisearch/dist/esm/batch.js","../../../node_modules/meilisearch/dist/esm/types.js","../../../node_modules/meilisearch/dist/esm/indexes.js","../../../node_modules/meilisearch/dist/esm/meilisearch.js","../src/search.js"],"sourcesContent":["export class MeiliSearchError extends Error {\n    name = \"MeiliSearchError\";\n    constructor(...params) {\n        super(...params);\n    }\n}\n//# sourceMappingURL=meilisearch-error.js.map","import { MeiliSearchError } from \"./meilisearch-error.js\";\nexport class MeiliSearchApiError extends MeiliSearchError {\n    name = \"MeiliSearchApiError\";\n    cause;\n    response;\n    constructor(response, responseBody) {\n        super(responseBody?.message ?? `${response.status}: ${response.statusText}`);\n        this.response = response;\n        if (responseBody !== undefined) {\n            this.cause = responseBody;\n        }\n    }\n}\n//# sourceMappingURL=meilisearch-api-error.js.map","import { MeiliSearchError } from \"./meilisearch-error.js\";\nexport class MeiliSearchRequestError extends MeiliSearchError {\n    name = \"MeiliSearchRequestError\";\n    constructor(url, cause) {\n        super(`Request to ${url} has failed`, { cause });\n    }\n}\n//# sourceMappingURL=meilisearch-request-error.js.map","import { MeiliSearchError } from \"./meilisearch-error.js\";\nexport class MeiliSearchTimeOutError extends MeiliSearchError {\n    name = \"MeiliSearchTimeOutError\";\n    constructor(message) {\n        super(message);\n    }\n}\n//# sourceMappingURL=meilisearch-timeout-error.js.map","export function versionErrorHintMessage(message, method) {\n    return `${message}\\nHint: It might not be working because maybe you're not up to date with the Meilisearch version that ${method} call requires.`;\n}\n//# sourceMappingURL=version-hint-message.js.map","/** Removes undefined entries from object */\nfunction removeUndefinedFromObject(obj) {\n    return Object.entries(obj).reduce((acc, curEntry) => {\n        const [key, val] = curEntry;\n        if (val !== undefined)\n            acc[key] = val;\n        return acc;\n    }, {});\n}\nasync function sleep(ms) {\n    return await new Promise((resolve) => setTimeout(resolve, ms));\n}\nfunction addProtocolIfNotPresent(host) {\n    if (!(host.startsWith(\"https://\") || host.startsWith(\"http://\"))) {\n        return `http://${host}`;\n    }\n    return host;\n}\nfunction addTrailingSlash(url) {\n    if (!url.endsWith(\"/\")) {\n        url += \"/\";\n    }\n    return url;\n}\nexport { sleep, removeUndefinedFromObject, addProtocolIfNotPresent, addTrailingSlash, };\n//# sourceMappingURL=utils.js.map","import { PACKAGE_VERSION } from \"./package-version.js\";\nimport { MeiliSearchError, MeiliSearchApiError, MeiliSearchRequestError, } from \"./errors/index.js\";\nimport { addTrailingSlash, addProtocolIfNotPresent } from \"./utils.js\";\nfunction toQueryParams(parameters) {\n    const params = Object.keys(parameters);\n    const queryParams = params.reduce((acc, key) => {\n        const value = parameters[key];\n        if (value === undefined) {\n            return acc;\n        }\n        else if (Array.isArray(value)) {\n            return { ...acc, [key]: value.join(\",\") };\n        }\n        else if (value instanceof Date) {\n            return { ...acc, [key]: value.toISOString() };\n        }\n        return { ...acc, [key]: value };\n    }, {});\n    return queryParams;\n}\nfunction constructHostURL(host) {\n    try {\n        host = addProtocolIfNotPresent(host);\n        host = addTrailingSlash(host);\n        return host;\n    }\n    catch {\n        throw new MeiliSearchError(\"The provided host is not valid.\");\n    }\n}\nfunction cloneAndParseHeaders(headers) {\n    if (Array.isArray(headers)) {\n        return headers.reduce((acc, headerPair) => {\n            acc[headerPair[0]] = headerPair[1];\n            return acc;\n        }, {});\n    }\n    else if (\"has\" in headers) {\n        const clonedHeaders = {};\n        headers.forEach((value, key) => (clonedHeaders[key] = value));\n        return clonedHeaders;\n    }\n    else {\n        return Object.assign({}, headers);\n    }\n}\nfunction createHeaders(config) {\n    const agentHeader = \"X-Meilisearch-Client\";\n    const packageAgent = `Meilisearch JavaScript (v${PACKAGE_VERSION})`;\n    const contentType = \"Content-Type\";\n    const authorization = \"Authorization\";\n    const headers = cloneAndParseHeaders(config.requestConfig?.headers ?? {});\n    // do not override if user provided the header\n    if (config.apiKey && !headers[authorization]) {\n        headers[authorization] = `Bearer ${config.apiKey}`;\n    }\n    if (!headers[contentType]) {\n        headers[\"Content-Type\"] = \"application/json\";\n    }\n    // Creates the custom user agent with information on the package used.\n    if (config.clientAgents && Array.isArray(config.clientAgents)) {\n        const clients = config.clientAgents.concat(packageAgent);\n        headers[agentHeader] = clients.join(\" ; \");\n    }\n    else if (config.clientAgents && !Array.isArray(config.clientAgents)) {\n        // If the header is defined but not an array\n        throw new MeiliSearchError(`Meilisearch: The header \"${agentHeader}\" should be an array of string(s).\\n`);\n    }\n    else {\n        headers[agentHeader] = packageAgent;\n    }\n    return headers;\n}\nclass HttpRequests {\n    headers;\n    url;\n    requestConfig;\n    httpClient;\n    requestTimeout;\n    constructor(config) {\n        this.headers = createHeaders(config);\n        this.requestConfig = config.requestConfig;\n        this.httpClient = config.httpClient;\n        this.requestTimeout = config.timeout;\n        try {\n            const host = constructHostURL(config.host);\n            this.url = new URL(host);\n        }\n        catch {\n            throw new MeiliSearchError(\"The provided host is not valid.\");\n        }\n    }\n    async request({ method, url, params, body, config = {}, }) {\n        const constructURL = new URL(url, this.url);\n        if (params) {\n            const queryParams = new URLSearchParams();\n            Object.keys(params)\n                .filter((x) => params[x] !== null)\n                .map((x) => queryParams.set(x, params[x]));\n            constructURL.search = queryParams.toString();\n        }\n        // in case a custom content-type is provided\n        // do not stringify body\n        if (!config.headers?.[\"Content-Type\"]) {\n            body = JSON.stringify(body);\n        }\n        const headers = { ...this.headers, ...config.headers };\n        const responsePromise = this.fetchWithTimeout(constructURL.toString(), {\n            ...config,\n            ...this.requestConfig,\n            method,\n            body,\n            headers,\n        }, this.requestTimeout);\n        const response = await responsePromise.catch((error) => {\n            throw new MeiliSearchRequestError(constructURL.toString(), error);\n        });\n        // When using a custom HTTP client, the response is returned to allow the user to parse/handle it as they see fit\n        if (this.httpClient !== undefined) {\n            return response;\n        }\n        const responseBody = await response.text();\n        const parsedResponse = responseBody === \"\" ? undefined : JSON.parse(responseBody);\n        if (!response.ok) {\n            throw new MeiliSearchApiError(response, parsedResponse);\n        }\n        return parsedResponse;\n    }\n    async fetchWithTimeout(url, options, timeout) {\n        return new Promise((resolve, reject) => {\n            const fetchFn = this.httpClient ? this.httpClient : fetch;\n            const fetchPromise = fetchFn(url, options);\n            const promises = [fetchPromise];\n            // TimeoutPromise will not run if undefined or zero\n            let timeoutId;\n            if (timeout) {\n                const timeoutPromise = new Promise((_, reject) => {\n                    timeoutId = setTimeout(() => {\n                        reject(new Error(\"Error: Request Timed Out\"));\n                    }, timeout);\n                });\n                promises.push(timeoutPromise);\n            }\n            Promise.race(promises)\n                .then(resolve)\n                .catch(reject)\n                .finally(() => {\n                clearTimeout(timeoutId);\n            });\n        });\n    }\n    async get(url, params, config) {\n        return await this.request({\n            method: \"GET\",\n            url,\n            params,\n            config,\n        });\n    }\n    async post(url, data, params, config) {\n        return await this.request({\n            method: \"POST\",\n            url,\n            body: data,\n            params,\n            config,\n        });\n    }\n    async put(url, data, params, config) {\n        return await this.request({\n            method: \"PUT\",\n            url,\n            body: data,\n            params,\n            config,\n        });\n    }\n    async patch(url, data, params, config) {\n        return await this.request({\n            method: \"PATCH\",\n            url,\n            body: data,\n            params,\n            config,\n        });\n    }\n    async delete(url, data, params, config) {\n        return await this.request({\n            method: \"DELETE\",\n            url,\n            body: data,\n            params,\n            config,\n        });\n    }\n}\nexport { HttpRequests, toQueryParams };\n//# sourceMappingURL=http-requests.js.map","class EnqueuedTask {\n    taskUid;\n    indexUid;\n    status;\n    type;\n    enqueuedAt;\n    constructor(task) {\n        this.taskUid = task.taskUid;\n        this.indexUid = task.indexUid;\n        this.status = task.status;\n        this.type = task.type;\n        this.enqueuedAt = new Date(task.enqueuedAt);\n    }\n}\nexport { EnqueuedTask };\n//# sourceMappingURL=enqueued-task.js.map","import { MeiliSearchTimeOutError } from \"./errors/index.js\";\nimport { TaskStatus } from \"./types.js\";\nimport { HttpRequests, toQueryParams } from \"./http-requests.js\";\nimport { sleep } from \"./utils.js\";\nimport { EnqueuedTask } from \"./enqueued-task.js\";\nclass Task {\n    indexUid;\n    status;\n    type;\n    uid;\n    batchUid;\n    canceledBy;\n    details;\n    error;\n    duration;\n    startedAt;\n    enqueuedAt;\n    finishedAt;\n    constructor(task) {\n        this.indexUid = task.indexUid;\n        this.status = task.status;\n        this.type = task.type;\n        this.uid = task.uid;\n        this.batchUid = task.batchUid;\n        this.details = task.details;\n        this.canceledBy = task.canceledBy;\n        this.error = task.error;\n        this.duration = task.duration;\n        this.startedAt = new Date(task.startedAt);\n        this.enqueuedAt = new Date(task.enqueuedAt);\n        this.finishedAt = new Date(task.finishedAt);\n    }\n}\nclass TaskClient {\n    httpRequest;\n    constructor(config) {\n        this.httpRequest = new HttpRequests(config);\n    }\n    /**\n     * Get one task\n     *\n     * @param uid - Unique identifier of the task\n     * @returns\n     */\n    async getTask(uid) {\n        const url = `tasks/${uid}`;\n        const taskItem = await this.httpRequest.get(url);\n        return new Task(taskItem);\n    }\n    /**\n     * Get tasks\n     *\n     * @param parameters - Parameters to browse the tasks\n     * @returns Promise containing all tasks\n     */\n    async getTasks(parameters = {}) {\n        const url = `tasks`;\n        const tasks = await this.httpRequest.get(url, toQueryParams(parameters));\n        return {\n            ...tasks,\n            results: tasks.results.map((task) => new Task(task)),\n        };\n    }\n    /**\n     * Wait for a task to be processed.\n     *\n     * @param taskUid - Task identifier\n     * @param options - Additional configuration options\n     * @returns Promise returning a task after it has been processed\n     */\n    async waitForTask(taskUid, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        const startingTime = Date.now();\n        while (Date.now() - startingTime < timeOutMs) {\n            const response = await this.getTask(taskUid);\n            if (![\n                TaskStatus.TASK_ENQUEUED,\n                TaskStatus.TASK_PROCESSING,\n            ].includes(response.status))\n                return response;\n            await sleep(intervalMs);\n        }\n        throw new MeiliSearchTimeOutError(`timeout of ${timeOutMs}ms has exceeded on process ${taskUid} when waiting a task to be resolved.`);\n    }\n    /**\n     * Waits for multiple tasks to be processed\n     *\n     * @param taskUids - Tasks identifier list\n     * @param options - Wait options\n     * @returns Promise returning a list of tasks after they have been processed\n     */\n    async waitForTasks(taskUids, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        const tasks = [];\n        for (const taskUid of taskUids) {\n            const task = await this.waitForTask(taskUid, {\n                timeOutMs,\n                intervalMs,\n            });\n            tasks.push(task);\n        }\n        return tasks;\n    }\n    /**\n     * Cancel a list of enqueued or processing tasks.\n     *\n     * @param parameters - Parameters to filter the tasks.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async cancelTasks(parameters = {}) {\n        const url = `tasks/cancel`;\n        const task = await this.httpRequest.post(url, {}, toQueryParams(parameters));\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Delete a list tasks.\n     *\n     * @param parameters - Parameters to filter the tasks.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async deleteTasks(parameters = {}) {\n        const url = `tasks`;\n        const task = await this.httpRequest.delete(url, {}, toQueryParams(parameters));\n        return new EnqueuedTask(task);\n    }\n}\nexport { TaskClient, Task };\n//# sourceMappingURL=task.js.map","import { HttpRequests, toQueryParams } from \"./http-requests.js\";\nclass Batch {\n    uid;\n    details;\n    stats;\n    startedAt;\n    finishedAt;\n    duration;\n    progress;\n    constructor(batch) {\n        this.uid = batch.uid;\n        this.details = batch.details;\n        this.stats = batch.stats;\n        this.startedAt = batch.startedAt;\n        this.finishedAt = batch.finishedAt;\n        this.duration = batch.duration;\n        this.progress = batch.progress;\n    }\n}\nclass BatchClient {\n    httpRequest;\n    constructor(config) {\n        this.httpRequest = new HttpRequests(config);\n    }\n    /**\n     * Get one batch\n     *\n     * @param uid - Unique identifier of the batch\n     * @returns\n     */\n    async getBatch(uid) {\n        const url = `batches/${uid}`;\n        const batch = await this.httpRequest.get(url);\n        return new Batch(batch);\n    }\n    /**\n     * Get batches\n     *\n     * @param parameters - Parameters to browse the batches\n     * @returns Promise containing all batches\n     */\n    async getBatches(parameters = {}) {\n        const url = `batches`;\n        const batches = await this.httpRequest.get(url, toQueryParams(parameters));\n        return {\n            ...batches,\n            results: batches.results.map((batch) => new Batch(batch)),\n        };\n    }\n}\nexport { BatchClient, Batch };\n//# sourceMappingURL=batch.js.map","// Type definitions for meilisearch\n// Project: https://github.com/meilisearch/meilisearch-js\n// Definitions by: qdequele <quentin@meilisearch.com> <https://github.com/meilisearch>\n// Definitions: https://github.com/meilisearch/meilisearch-js\n// TypeScript Version: ^3.8.3\nimport { Task } from \"./task.js\";\nimport { Batch } from \"./batch.js\";\n/*\n * SEARCH PARAMETERS\n */\nexport const MatchingStrategies = {\n    ALL: \"all\",\n    LAST: \"last\",\n    FREQUENCY: \"frequency\",\n};\nexport const ContentTypeEnum = {\n    JSON: \"application/json\",\n    CSV: \"text/csv\",\n    NDJSON: \"application/x-ndjson\",\n};\n/*\n ** TASKS\n */\nexport const TaskStatus = {\n    TASK_SUCCEEDED: \"succeeded\",\n    TASK_PROCESSING: \"processing\",\n    TASK_FAILED: \"failed\",\n    TASK_ENQUEUED: \"enqueued\",\n    TASK_CANCELED: \"canceled\",\n};\nexport const TaskTypes = {\n    DOCUMENTS_ADDITION_OR_UPDATE: \"documentAdditionOrUpdate\",\n    DOCUMENT_DELETION: \"documentDeletion\",\n    DUMP_CREATION: \"dumpCreation\",\n    INDEX_CREATION: \"indexCreation\",\n    INDEX_DELETION: \"indexDeletion\",\n    INDEXES_SWAP: \"indexSwap\",\n    INDEX_UPDATE: \"indexUpdate\",\n    SETTINGS_UPDATE: \"settingsUpdate\",\n    SNAPSHOT_CREATION: \"snapshotCreation\",\n    TASK_CANCELATION: \"taskCancelation\",\n    TASK_DELETION: \"taskDeletion\",\n};\n// @TODO: This doesn't seem to be up to date, and its usefullness comes into question.\nexport const ErrorStatusCode = {\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#index_creation_failed */\n    INDEX_CREATION_FAILED: \"index_creation_failed\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_index_uid */\n    MISSING_INDEX_UID: \"missing_index_uid\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#index_already_exists */\n    INDEX_ALREADY_EXISTS: \"index_already_exists\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#index_not_found */\n    INDEX_NOT_FOUND: \"index_not_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_index_uid */\n    INVALID_INDEX_UID: \"invalid_index_uid\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#index_not_accessible */\n    INDEX_NOT_ACCESSIBLE: \"index_not_accessible\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_index_offset */\n    INVALID_INDEX_OFFSET: \"invalid_index_offset\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_index_limit */\n    INVALID_INDEX_LIMIT: \"invalid_index_limit\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_state */\n    INVALID_STATE: \"invalid_state\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#primary_key_inference_failed */\n    PRIMARY_KEY_INFERENCE_FAILED: \"primary_key_inference_failed\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#index_primary_key_already_exists */\n    INDEX_PRIMARY_KEY_ALREADY_EXISTS: \"index_primary_key_already_exists\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_index_primary_key */\n    INVALID_INDEX_PRIMARY_KEY: \"invalid_index_primary_key\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#max_fields_limit_exceeded */\n    DOCUMENTS_FIELDS_LIMIT_REACHED: \"document_fields_limit_reached\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_document_id */\n    MISSING_DOCUMENT_ID: \"missing_document_id\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_document_id */\n    INVALID_DOCUMENT_ID: \"invalid_document_id\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_content_type */\n    INVALID_CONTENT_TYPE: \"invalid_content_type\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_content_type */\n    MISSING_CONTENT_TYPE: \"missing_content_type\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_fields */\n    INVALID_DOCUMENT_FIELDS: \"invalid_document_fields\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_limit */\n    INVALID_DOCUMENT_LIMIT: \"invalid_document_limit\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_offset */\n    INVALID_DOCUMENT_OFFSET: \"invalid_document_offset\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_filter */\n    INVALID_DOCUMENT_FILTER: \"invalid_document_filter\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_document_filter */\n    MISSING_DOCUMENT_FILTER: \"missing_document_filter\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_vectors_field */\n    INVALID_DOCUMENT_VECTORS_FIELD: \"invalid_document_vectors_field\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#payload_too_large */\n    PAYLOAD_TOO_LARGE: \"payload_too_large\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_payload */\n    MISSING_PAYLOAD: \"missing_payload\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#malformed_payload */\n    MALFORMED_PAYLOAD: \"malformed_payload\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#no_space_left_on_device */\n    NO_SPACE_LEFT_ON_DEVICE: \"no_space_left_on_device\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_store_file */\n    INVALID_STORE_FILE: \"invalid_store_file\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_ranking_rules */\n    INVALID_RANKING_RULES: \"missing_document_id\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_request */\n    INVALID_REQUEST: \"invalid_request\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_document_geo_field */\n    INVALID_DOCUMENT_GEO_FIELD: \"invalid_document_geo_field\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_q */\n    INVALID_SEARCH_Q: \"invalid_search_q\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_offset */\n    INVALID_SEARCH_OFFSET: \"invalid_search_offset\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_limit */\n    INVALID_SEARCH_LIMIT: \"invalid_search_limit\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_page */\n    INVALID_SEARCH_PAGE: \"invalid_search_page\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_hits_per_page */\n    INVALID_SEARCH_HITS_PER_PAGE: \"invalid_search_hits_per_page\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_attributes_to_retrieve */\n    INVALID_SEARCH_ATTRIBUTES_TO_RETRIEVE: \"invalid_search_attributes_to_retrieve\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_attributes_to_crop */\n    INVALID_SEARCH_ATTRIBUTES_TO_CROP: \"invalid_search_attributes_to_crop\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_crop_length */\n    INVALID_SEARCH_CROP_LENGTH: \"invalid_search_crop_length\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_attributes_to_highlight */\n    INVALID_SEARCH_ATTRIBUTES_TO_HIGHLIGHT: \"invalid_search_attributes_to_highlight\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_show_matches_position */\n    INVALID_SEARCH_SHOW_MATCHES_POSITION: \"invalid_search_show_matches_position\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_filter */\n    INVALID_SEARCH_FILTER: \"invalid_search_filter\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_sort */\n    INVALID_SEARCH_SORT: \"invalid_search_sort\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_facets */\n    INVALID_SEARCH_FACETS: \"invalid_search_facets\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_highlight_pre_tag */\n    INVALID_SEARCH_HIGHLIGHT_PRE_TAG: \"invalid_search_highlight_pre_tag\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_highlight_post_tag */\n    INVALID_SEARCH_HIGHLIGHT_POST_TAG: \"invalid_search_highlight_post_tag\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_crop_marker */\n    INVALID_SEARCH_CROP_MARKER: \"invalid_search_crop_marker\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_matching_strategy */\n    INVALID_SEARCH_MATCHING_STRATEGY: \"invalid_search_matching_strategy\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_vector */\n    INVALID_SEARCH_VECTOR: \"invalid_search_vector\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_attributes_to_search_on */\n    INVALID_SEARCH_ATTRIBUTES_TO_SEARCH_ON: \"invalid_search_attributes_to_search_on\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#bad_request */\n    BAD_REQUEST: \"bad_request\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#document_not_found */\n    DOCUMENT_NOT_FOUND: \"document_not_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#internal */\n    INTERNAL: \"internal\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key */\n    INVALID_API_KEY: \"invalid_api_key\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_description */\n    INVALID_API_KEY_DESCRIPTION: \"invalid_api_key_description\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_actions */\n    INVALID_API_KEY_ACTIONS: \"invalid_api_key_actions\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_indexes */\n    INVALID_API_KEY_INDEXES: \"invalid_api_key_indexes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_expires_at */\n    INVALID_API_KEY_EXPIRES_AT: \"invalid_api_key_expires_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#api_key_not_found */\n    API_KEY_NOT_FOUND: \"api_key_not_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_uid */\n    IMMUTABLE_API_KEY_UID: \"immutable_api_key_uid\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_actions */\n    IMMUTABLE_API_KEY_ACTIONS: \"immutable_api_key_actions\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_indexes */\n    IMMUTABLE_API_KEY_INDEXES: \"immutable_api_key_indexes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_expires_at */\n    IMMUTABLE_API_KEY_EXPIRES_AT: \"immutable_api_key_expires_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_created_at */\n    IMMUTABLE_API_KEY_CREATED_AT: \"immutable_api_key_created_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_api_key_updated_at */\n    IMMUTABLE_API_KEY_UPDATED_AT: \"immutable_api_key_updated_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_authorization_header */\n    MISSING_AUTHORIZATION_HEADER: \"missing_authorization_header\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#unretrievable_document */\n    UNRETRIEVABLE_DOCUMENT: \"unretrievable_document\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#database_size_limit_reached */\n    MAX_DATABASE_SIZE_LIMIT_REACHED: \"database_size_limit_reached\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#task_not_found */\n    TASK_NOT_FOUND: \"task_not_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#dump_process_failed */\n    DUMP_PROCESS_FAILED: \"dump_process_failed\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#dump_not_found */\n    DUMP_NOT_FOUND: \"dump_not_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_swap_duplicate_index_found */\n    INVALID_SWAP_DUPLICATE_INDEX_FOUND: \"invalid_swap_duplicate_index_found\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_swap_indexes */\n    INVALID_SWAP_INDEXES: \"invalid_swap_indexes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_swap_indexes */\n    MISSING_SWAP_INDEXES: \"missing_swap_indexes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_master_key */\n    MISSING_MASTER_KEY: \"missing_master_key\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_types */\n    INVALID_TASK_TYPES: \"invalid_task_types\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_uids */\n    INVALID_TASK_UIDS: \"invalid_task_uids\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_statuses */\n    INVALID_TASK_STATUSES: \"invalid_task_statuses\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_limit */\n    INVALID_TASK_LIMIT: \"invalid_task_limit\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_from */\n    INVALID_TASK_FROM: \"invalid_task_from\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_canceled_by */\n    INVALID_TASK_CANCELED_BY: \"invalid_task_canceled_by\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_task_filters */\n    MISSING_TASK_FILTERS: \"missing_task_filters\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#too_many_open_files */\n    TOO_MANY_OPEN_FILES: \"too_many_open_files\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#io_error */\n    IO_ERROR: \"io_error\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_index_uids */\n    INVALID_TASK_INDEX_UIDS: \"invalid_task_index_uids\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_index_uid */\n    IMMUTABLE_INDEX_UID: \"immutable_index_uid\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_index_created_at */\n    IMMUTABLE_INDEX_CREATED_AT: \"immutable_index_created_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#immutable_index_updated_at */\n    IMMUTABLE_INDEX_UPDATED_AT: \"immutable_index_updated_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_displayed_attributes */\n    INVALID_SETTINGS_DISPLAYED_ATTRIBUTES: \"invalid_settings_displayed_attributes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_searchable_attributes */\n    INVALID_SETTINGS_SEARCHABLE_ATTRIBUTES: \"invalid_settings_searchable_attributes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_filterable_attributes */\n    INVALID_SETTINGS_FILTERABLE_ATTRIBUTES: \"invalid_settings_filterable_attributes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_sortable_attributes */\n    INVALID_SETTINGS_SORTABLE_ATTRIBUTES: \"invalid_settings_sortable_attributes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_ranking_rules */\n    INVALID_SETTINGS_RANKING_RULES: \"invalid_settings_ranking_rules\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_stop_words */\n    INVALID_SETTINGS_STOP_WORDS: \"invalid_settings_stop_words\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_synonyms */\n    INVALID_SETTINGS_SYNONYMS: \"invalid_settings_synonyms\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_distinct_attribute */\n    INVALID_SETTINGS_DISTINCT_ATTRIBUTE: \"invalid_settings_distinct_attribute\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_typo_tolerance */\n    INVALID_SETTINGS_TYPO_TOLERANCE: \"invalid_settings_typo_tolerance\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_faceting */\n    INVALID_SETTINGS_FACETING: \"invalid_settings_faceting\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_pagination */\n    INVALID_SETTINGS_PAGINATION: \"invalid_settings_pagination\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_search_cutoff_ms */\n    INVALID_SETTINGS_SEARCH_CUTOFF_MS: \"invalid_settings_search_cutoff_ms\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_settings_search_cutoff_ms */\n    INVALID_SETTINGS_LOCALIZED_ATTRIBUTES: \"invalid_settings_localized_attributes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_before_enqueued_at */\n    INVALID_TASK_BEFORE_ENQUEUED_AT: \"invalid_task_before_enqueued_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_after_enqueued_at */\n    INVALID_TASK_AFTER_ENQUEUED_AT: \"invalid_task_after_enqueued_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_before_started_at */\n    INVALID_TASK_BEFORE_STARTED_AT: \"invalid_task_before_started_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_after_started_at */\n    INVALID_TASK_AFTER_STARTED_AT: \"invalid_task_after_started_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_before_finished_at */\n    INVALID_TASK_BEFORE_FINISHED_AT: \"invalid_task_before_finished_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_task_after_finished_at */\n    INVALID_TASK_AFTER_FINISHED_AT: \"invalid_task_after_finished_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_api_key_actions */\n    MISSING_API_KEY_ACTIONS: \"missing_api_key_actions\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_api_key_indexes */\n    MISSING_API_KEY_INDEXES: \"missing_api_key_indexes\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_api_key_expires_at */\n    MISSING_API_KEY_EXPIRES_AT: \"missing_api_key_expires_at\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_limit */\n    INVALID_API_KEY_LIMIT: \"invalid_api_key_limit\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_api_key_offset */\n    INVALID_API_KEY_OFFSET: \"invalid_api_key_offset\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_facet_search_facet_name */\n    INVALID_FACET_SEARCH_FACET_NAME: \"invalid_facet_search_facet_name\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#missing_facet_search_facet_name */\n    MISSING_FACET_SEARCH_FACET_NAME: \"missing_facet_search_facet_name\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_facet_search_facet_query */\n    INVALID_FACET_SEARCH_FACET_QUERY: \"invalid_facet_search_facet_query\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_search_ranking_score_threshold */\n    INVALID_SEARCH_RANKING_SCORE_THRESHOLD: \"invalid_search_ranking_score_threshold\",\n    /** @see https://www.meilisearch.com/docs/reference/errors/error_codes#invalid_similar_ranking_score_threshold */\n    INVALID_SIMILAR_RANKING_SCORE_THRESHOLD: \"invalid_similar_ranking_score_threshold\",\n};\n//# sourceMappingURL=types.js.map","/*\n * Bundle: MeiliSearch / Indexes\n * Project: MeiliSearch - Javascript API\n * Author: Quentin de Quelen <quentin@meilisearch.com>\n * Copyright: 2019, MeiliSearch\n */\nimport { MeiliSearchError, MeiliSearchRequestError, versionErrorHintMessage, MeiliSearchApiError, } from \"./errors/index.js\";\nimport { removeUndefinedFromObject } from \"./utils.js\";\nimport { HttpRequests } from \"./http-requests.js\";\nimport { Task, TaskClient } from \"./task.js\";\nimport { EnqueuedTask } from \"./enqueued-task.js\";\nclass Index {\n    uid;\n    primaryKey;\n    createdAt;\n    updatedAt;\n    httpRequest;\n    tasks;\n    /**\n     * @param config - Request configuration options\n     * @param uid - UID of the index\n     * @param primaryKey - Primary Key of the index\n     */\n    constructor(config, uid, primaryKey) {\n        this.uid = uid;\n        this.primaryKey = primaryKey;\n        this.httpRequest = new HttpRequests(config);\n        this.tasks = new TaskClient(config);\n    }\n    ///\n    /// SEARCH\n    ///\n    /**\n     * Search for documents into an index\n     *\n     * @param query - Query string\n     * @param options - Search options\n     * @param config - Additional request configuration options\n     * @returns Promise containing the search response\n     */\n    async search(query, options, config) {\n        const url = `indexes/${this.uid}/search`;\n        return await this.httpRequest.post(url, removeUndefinedFromObject({ q: query, ...options }), undefined, config);\n    }\n    /**\n     * Search for documents into an index using the GET method\n     *\n     * @param query - Query string\n     * @param options - Search options\n     * @param config - Additional request configuration options\n     * @returns Promise containing the search response\n     */\n    async searchGet(query, options, config) {\n        const url = `indexes/${this.uid}/search`;\n        const parseFilter = (filter) => {\n            if (typeof filter === \"string\")\n                return filter;\n            else if (Array.isArray(filter))\n                throw new MeiliSearchError(\"The filter query parameter should be in string format when using searchGet\");\n            else\n                return undefined;\n        };\n        const getParams = {\n            q: query,\n            ...options,\n            filter: parseFilter(options?.filter),\n            sort: options?.sort?.join(\",\"),\n            facets: options?.facets?.join(\",\"),\n            attributesToRetrieve: options?.attributesToRetrieve?.join(\",\"),\n            attributesToCrop: options?.attributesToCrop?.join(\",\"),\n            attributesToHighlight: options?.attributesToHighlight?.join(\",\"),\n            vector: options?.vector?.join(\",\"),\n            attributesToSearchOn: options?.attributesToSearchOn?.join(\",\"),\n        };\n        return await this.httpRequest.get(url, removeUndefinedFromObject(getParams), config);\n    }\n    /**\n     * Search for facet values\n     *\n     * @param params - Parameters used to search on the facets\n     * @param config - Additional request configuration options\n     * @returns Promise containing the search response\n     */\n    async searchForFacetValues(params, config) {\n        const url = `indexes/${this.uid}/facet-search`;\n        return await this.httpRequest.post(url, removeUndefinedFromObject(params), undefined, config);\n    }\n    /**\n     * Search for similar documents\n     *\n     * @param params - Parameters used to search for similar documents\n     * @returns Promise containing the search response\n     */\n    async searchSimilarDocuments(params) {\n        const url = `indexes/${this.uid}/similar`;\n        return await this.httpRequest.post(url, removeUndefinedFromObject(params), undefined);\n    }\n    ///\n    /// INDEX\n    ///\n    /**\n     * Get index information.\n     *\n     * @returns Promise containing index information\n     */\n    async getRawInfo() {\n        const url = `indexes/${this.uid}`;\n        const res = await this.httpRequest.get(url);\n        this.primaryKey = res.primaryKey;\n        this.updatedAt = new Date(res.updatedAt);\n        this.createdAt = new Date(res.createdAt);\n        return res;\n    }\n    /**\n     * Fetch and update Index information.\n     *\n     * @returns Promise to the current Index object with updated information\n     */\n    async fetchInfo() {\n        await this.getRawInfo();\n        return this;\n    }\n    /**\n     * Get Primary Key.\n     *\n     * @returns Promise containing the Primary Key of the index\n     */\n    async fetchPrimaryKey() {\n        this.primaryKey = (await this.getRawInfo()).primaryKey;\n        return this.primaryKey;\n    }\n    /**\n     * Create an index.\n     *\n     * @param uid - Unique identifier of the Index\n     * @param options - Index options\n     * @param config - Request configuration options\n     * @returns Newly created Index object\n     */\n    static async create(uid, options = {}, config) {\n        const url = `indexes`;\n        const req = new HttpRequests(config);\n        const task = await req.post(url, { ...options, uid });\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Update an index.\n     *\n     * @param data - Data to update\n     * @returns Promise to the current Index object with updated information\n     */\n    async update(data) {\n        const url = `indexes/${this.uid}`;\n        const task = await this.httpRequest.patch(url, data);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    /**\n     * Delete an index.\n     *\n     * @returns Promise which resolves when index is deleted successfully\n     */\n    async delete() {\n        const url = `indexes/${this.uid}`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// TASKS\n    ///\n    /**\n     * Get the list of all the tasks of the index.\n     *\n     * @param parameters - Parameters to browse the tasks\n     * @returns Promise containing all tasks\n     */\n    async getTasks(parameters = {}) {\n        return await this.tasks.getTasks({ ...parameters, indexUids: [this.uid] });\n    }\n    /**\n     * Get one task of the index.\n     *\n     * @param taskUid - Task identifier\n     * @returns Promise containing a task\n     */\n    async getTask(taskUid) {\n        return await this.tasks.getTask(taskUid);\n    }\n    /**\n     * Wait for multiple tasks to be processed.\n     *\n     * @param taskUids - Tasks identifier\n     * @param waitOptions - Options on timeout and interval\n     * @returns Promise containing an array of tasks\n     */\n    async waitForTasks(taskUids, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        return await this.tasks.waitForTasks(taskUids, {\n            timeOutMs,\n            intervalMs,\n        });\n    }\n    /**\n     * Wait for a task to be processed.\n     *\n     * @param taskUid - Task identifier\n     * @param waitOptions - Options on timeout and interval\n     * @returns Promise containing an array of tasks\n     */\n    async waitForTask(taskUid, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        return await this.tasks.waitForTask(taskUid, {\n            timeOutMs,\n            intervalMs,\n        });\n    }\n    ///\n    /// STATS\n    ///\n    /**\n     * Get stats of an index\n     *\n     * @returns Promise containing object with stats of the index\n     */\n    async getStats() {\n        const url = `indexes/${this.uid}/stats`;\n        return await this.httpRequest.get(url);\n    }\n    ///\n    /// DOCUMENTS\n    ///\n    /**\n     * Get documents of an index.\n     *\n     * @param parameters - Parameters to browse the documents. Parameters can\n     *   contain the `filter` field only available in Meilisearch v1.2 and newer\n     * @returns Promise containing the returned documents\n     */\n    async getDocuments(parameters = {}) {\n        parameters = removeUndefinedFromObject(parameters);\n        // In case `filter` is provided, use `POST /documents/fetch`\n        if (parameters.filter !== undefined) {\n            try {\n                const url = `indexes/${this.uid}/documents/fetch`;\n                return await this.httpRequest.post(url, parameters);\n            }\n            catch (e) {\n                if (e instanceof MeiliSearchRequestError) {\n                    e.message = versionErrorHintMessage(e.message, \"getDocuments\");\n                }\n                else if (e instanceof MeiliSearchApiError) {\n                    e.message = versionErrorHintMessage(e.message, \"getDocuments\");\n                }\n                throw e;\n            }\n            // Else use `GET /documents` method\n        }\n        else {\n            const url = `indexes/${this.uid}/documents`;\n            // Transform fields to query parameter string format\n            const fields = Array.isArray(parameters?.fields)\n                ? { fields: parameters?.fields?.join(\",\") }\n                : {};\n            return await this.httpRequest.get(url, {\n                ...parameters,\n                ...fields,\n            });\n        }\n    }\n    /**\n     * Get one document\n     *\n     * @param documentId - Document ID\n     * @param parameters - Parameters applied on a document\n     * @returns Promise containing Document response\n     */\n    async getDocument(documentId, parameters) {\n        const url = `indexes/${this.uid}/documents/${documentId}`;\n        const fields = (() => {\n            if (Array.isArray(parameters?.fields)) {\n                return parameters?.fields?.join(\",\");\n            }\n            return undefined;\n        })();\n        return await this.httpRequest.get(url, removeUndefinedFromObject({\n            ...parameters,\n            fields,\n        }));\n    }\n    /**\n     * Add or replace multiples documents to an index\n     *\n     * @param documents - Array of Document objects to add/replace\n     * @param options - Options on document addition\n     * @returns Promise containing an EnqueuedTask\n     */\n    async addDocuments(documents, options) {\n        const url = `indexes/${this.uid}/documents`;\n        const task = await this.httpRequest.post(url, documents, options);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Add or replace multiples documents in a string format to an index. It only\n     * supports csv, ndjson and json formats.\n     *\n     * @param documents - Documents provided in a string to add/replace\n     * @param contentType - Content type of your document:\n     *   'text/csv'|'application/x-ndjson'|'application/json'\n     * @param options - Options on document addition\n     * @returns Promise containing an EnqueuedTask\n     */\n    async addDocumentsFromString(documents, contentType, queryParams) {\n        const url = `indexes/${this.uid}/documents`;\n        const task = await this.httpRequest.post(url, documents, queryParams, {\n            headers: {\n                \"Content-Type\": contentType,\n            },\n        });\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Add or replace multiples documents to an index in batches\n     *\n     * @param documents - Array of Document objects to add/replace\n     * @param batchSize - Size of the batch\n     * @param options - Options on document addition\n     * @returns Promise containing array of enqueued task objects for each batch\n     */\n    async addDocumentsInBatches(documents, batchSize = 1000, options) {\n        const updates = [];\n        for (let i = 0; i < documents.length; i += batchSize) {\n            updates.push(await this.addDocuments(documents.slice(i, i + batchSize), options));\n        }\n        return updates;\n    }\n    /**\n     * Add or update multiples documents to an index\n     *\n     * @param documents - Array of Document objects to add/update\n     * @param options - Options on document update\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateDocuments(documents, options) {\n        const url = `indexes/${this.uid}/documents`;\n        const task = await this.httpRequest.put(url, documents, options);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Add or update multiples documents to an index in batches\n     *\n     * @param documents - Array of Document objects to add/update\n     * @param batchSize - Size of the batch\n     * @param options - Options on document update\n     * @returns Promise containing array of enqueued task objects for each batch\n     */\n    async updateDocumentsInBatches(documents, batchSize = 1000, options) {\n        const updates = [];\n        for (let i = 0; i < documents.length; i += batchSize) {\n            updates.push(await this.updateDocuments(documents.slice(i, i + batchSize), options));\n        }\n        return updates;\n    }\n    /**\n     * Add or update multiples documents in a string format to an index. It only\n     * supports csv, ndjson and json formats.\n     *\n     * @param documents - Documents provided in a string to add/update\n     * @param contentType - Content type of your document:\n     *   'text/csv'|'application/x-ndjson'|'application/json'\n     * @param queryParams - Options on raw document addition\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateDocumentsFromString(documents, contentType, queryParams) {\n        const url = `indexes/${this.uid}/documents`;\n        const task = await this.httpRequest.put(url, documents, queryParams, {\n            headers: {\n                \"Content-Type\": contentType,\n            },\n        });\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Delete one document\n     *\n     * @param documentId - Id of Document to delete\n     * @returns Promise containing an EnqueuedTask\n     */\n    async deleteDocument(documentId) {\n        const url = `indexes/${this.uid}/documents/${documentId}`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    /**\n     * Delete multiples documents of an index.\n     *\n     * @param params - Params value can be:\n     *\n     *   - DocumentsDeletionQuery: An object containing the parameters to customize\n     *       your document deletion. Only available in Meilisearch v1.2 and newer\n     *   - DocumentsIds: An array of document ids to delete\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async deleteDocuments(params) {\n        // If params is of type DocumentsDeletionQuery\n        const isDocumentsDeletionQuery = !Array.isArray(params) && typeof params === \"object\";\n        const endpoint = isDocumentsDeletionQuery\n            ? \"documents/delete\"\n            : \"documents/delete-batch\";\n        const url = `indexes/${this.uid}/${endpoint}`;\n        try {\n            const task = await this.httpRequest.post(url, params);\n            return new EnqueuedTask(task);\n        }\n        catch (e) {\n            if (e instanceof MeiliSearchRequestError && isDocumentsDeletionQuery) {\n                e.message = versionErrorHintMessage(e.message, \"deleteDocuments\");\n            }\n            else if (e instanceof MeiliSearchApiError) {\n                e.message = versionErrorHintMessage(e.message, \"deleteDocuments\");\n            }\n            throw e;\n        }\n    }\n    /**\n     * Delete all documents of an index\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async deleteAllDocuments() {\n        const url = `indexes/${this.uid}/documents`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    /**\n     * This is an EXPERIMENTAL feature, which may break without a major version.\n     * It's available after Meilisearch v1.10.\n     *\n     * More info about the feature:\n     * https://github.com/orgs/meilisearch/discussions/762 More info about\n     * experimental features in general:\n     * https://www.meilisearch.com/docs/reference/api/experimental-features\n     *\n     * @param options - Object containing the function string and related options\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateDocumentsByFunction(options) {\n        const url = `indexes/${this.uid}/documents/edit`;\n        const task = await this.httpRequest.post(url, options);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// SETTINGS\n    ///\n    /**\n     * Retrieve all settings\n     *\n     * @returns Promise containing Settings object\n     */\n    async getSettings() {\n        const url = `indexes/${this.uid}/settings`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update all settings Any parameters not provided will be left unchanged.\n     *\n     * @param settings - Object containing parameters with their updated values\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateSettings(settings) {\n        const url = `indexes/${this.uid}/settings`;\n        const task = await this.httpRequest.patch(url, settings);\n        task.enqueued = new Date(task.enqueuedAt);\n        return task;\n    }\n    /**\n     * Reset settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSettings() {\n        const url = `indexes/${this.uid}/settings`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// PAGINATION SETTINGS\n    ///\n    /**\n     * Get the pagination settings.\n     *\n     * @returns Promise containing object of pagination settings\n     */\n    async getPagination() {\n        const url = `indexes/${this.uid}/settings/pagination`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the pagination settings.\n     *\n     * @param pagination - Pagination object\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updatePagination(pagination) {\n        const url = `indexes/${this.uid}/settings/pagination`;\n        const task = await this.httpRequest.patch(url, pagination);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the pagination settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetPagination() {\n        const url = `indexes/${this.uid}/settings/pagination`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// SYNONYMS\n    ///\n    /**\n     * Get the list of all synonyms\n     *\n     * @returns Promise containing object of synonym mappings\n     */\n    async getSynonyms() {\n        const url = `indexes/${this.uid}/settings/synonyms`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the list of synonyms. Overwrite the old list.\n     *\n     * @param synonyms - Mapping of synonyms with their associated words\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateSynonyms(synonyms) {\n        const url = `indexes/${this.uid}/settings/synonyms`;\n        const task = await this.httpRequest.put(url, synonyms);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the synonym list to be empty again\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSynonyms() {\n        const url = `indexes/${this.uid}/settings/synonyms`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// STOP WORDS\n    ///\n    /**\n     * Get the list of all stop-words\n     *\n     * @returns Promise containing array of stop-words\n     */\n    async getStopWords() {\n        const url = `indexes/${this.uid}/settings/stop-words`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the list of stop-words. Overwrite the old list.\n     *\n     * @param stopWords - Array of strings that contains the stop-words.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateStopWords(stopWords) {\n        const url = `indexes/${this.uid}/settings/stop-words`;\n        const task = await this.httpRequest.put(url, stopWords);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the stop-words list to be empty again\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetStopWords() {\n        const url = `indexes/${this.uid}/settings/stop-words`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// RANKING RULES\n    ///\n    /**\n     * Get the list of all ranking-rules\n     *\n     * @returns Promise containing array of ranking-rules\n     */\n    async getRankingRules() {\n        const url = `indexes/${this.uid}/settings/ranking-rules`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the list of ranking-rules. Overwrite the old list.\n     *\n     * @param rankingRules - Array that contain ranking rules sorted by order of\n     *   importance.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateRankingRules(rankingRules) {\n        const url = `indexes/${this.uid}/settings/ranking-rules`;\n        const task = await this.httpRequest.put(url, rankingRules);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the ranking rules list to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetRankingRules() {\n        const url = `indexes/${this.uid}/settings/ranking-rules`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// DISTINCT ATTRIBUTE\n    ///\n    /**\n     * Get the distinct-attribute\n     *\n     * @returns Promise containing the distinct-attribute of the index\n     */\n    async getDistinctAttribute() {\n        const url = `indexes/${this.uid}/settings/distinct-attribute`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the distinct-attribute.\n     *\n     * @param distinctAttribute - Field name of the distinct-attribute\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateDistinctAttribute(distinctAttribute) {\n        const url = `indexes/${this.uid}/settings/distinct-attribute`;\n        const task = await this.httpRequest.put(url, distinctAttribute);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the distinct-attribute.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetDistinctAttribute() {\n        const url = `indexes/${this.uid}/settings/distinct-attribute`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// FILTERABLE ATTRIBUTES\n    ///\n    /**\n     * Get the filterable-attributes\n     *\n     * @returns Promise containing an array of filterable-attributes\n     */\n    async getFilterableAttributes() {\n        const url = `indexes/${this.uid}/settings/filterable-attributes`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the filterable-attributes.\n     *\n     * @param filterableAttributes - Array of strings containing the attributes\n     *   that can be used as filters at query time\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateFilterableAttributes(filterableAttributes) {\n        const url = `indexes/${this.uid}/settings/filterable-attributes`;\n        const task = await this.httpRequest.put(url, filterableAttributes);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the filterable-attributes.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetFilterableAttributes() {\n        const url = `indexes/${this.uid}/settings/filterable-attributes`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// SORTABLE ATTRIBUTES\n    ///\n    /**\n     * Get the sortable-attributes\n     *\n     * @returns Promise containing array of sortable-attributes\n     */\n    async getSortableAttributes() {\n        const url = `indexes/${this.uid}/settings/sortable-attributes`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the sortable-attributes.\n     *\n     * @param sortableAttributes - Array of strings containing the attributes that\n     *   can be used to sort search results at query time\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateSortableAttributes(sortableAttributes) {\n        const url = `indexes/${this.uid}/settings/sortable-attributes`;\n        const task = await this.httpRequest.put(url, sortableAttributes);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the sortable-attributes.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSortableAttributes() {\n        const url = `indexes/${this.uid}/settings/sortable-attributes`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// SEARCHABLE ATTRIBUTE\n    ///\n    /**\n     * Get the searchable-attributes\n     *\n     * @returns Promise containing array of searchable-attributes\n     */\n    async getSearchableAttributes() {\n        const url = `indexes/${this.uid}/settings/searchable-attributes`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the searchable-attributes.\n     *\n     * @param searchableAttributes - Array of strings that contains searchable\n     *   attributes sorted by order of importance(most to least important)\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateSearchableAttributes(searchableAttributes) {\n        const url = `indexes/${this.uid}/settings/searchable-attributes`;\n        const task = await this.httpRequest.put(url, searchableAttributes);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the searchable-attributes.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSearchableAttributes() {\n        const url = `indexes/${this.uid}/settings/searchable-attributes`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// DISPLAYED ATTRIBUTE\n    ///\n    /**\n     * Get the displayed-attributes\n     *\n     * @returns Promise containing array of displayed-attributes\n     */\n    async getDisplayedAttributes() {\n        const url = `indexes/${this.uid}/settings/displayed-attributes`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the displayed-attributes.\n     *\n     * @param displayedAttributes - Array of strings that contains attributes of\n     *   an index to display\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateDisplayedAttributes(displayedAttributes) {\n        const url = `indexes/${this.uid}/settings/displayed-attributes`;\n        const task = await this.httpRequest.put(url, displayedAttributes);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the displayed-attributes.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetDisplayedAttributes() {\n        const url = `indexes/${this.uid}/settings/displayed-attributes`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// TYPO TOLERANCE\n    ///\n    /**\n     * Get the typo tolerance settings.\n     *\n     * @returns Promise containing the typo tolerance settings.\n     */\n    async getTypoTolerance() {\n        const url = `indexes/${this.uid}/settings/typo-tolerance`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the typo tolerance settings.\n     *\n     * @param typoTolerance - Object containing the custom typo tolerance\n     *   settings.\n     * @returns Promise containing object of the enqueued update\n     */\n    async updateTypoTolerance(typoTolerance) {\n        const url = `indexes/${this.uid}/settings/typo-tolerance`;\n        const task = await this.httpRequest.patch(url, typoTolerance);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    /**\n     * Reset the typo tolerance settings.\n     *\n     * @returns Promise containing object of the enqueued update\n     */\n    async resetTypoTolerance() {\n        const url = `indexes/${this.uid}/settings/typo-tolerance`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// FACETING\n    ///\n    /**\n     * Get the faceting settings.\n     *\n     * @returns Promise containing object of faceting index settings\n     */\n    async getFaceting() {\n        const url = `indexes/${this.uid}/settings/faceting`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the faceting settings.\n     *\n     * @param faceting - Faceting index settings object\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateFaceting(faceting) {\n        const url = `indexes/${this.uid}/settings/faceting`;\n        const task = await this.httpRequest.patch(url, faceting);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the faceting settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetFaceting() {\n        const url = `indexes/${this.uid}/settings/faceting`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// SEPARATOR TOKENS\n    ///\n    /**\n     * Get the list of all separator tokens.\n     *\n     * @returns Promise containing array of separator tokens\n     */\n    async getSeparatorTokens() {\n        const url = `indexes/${this.uid}/settings/separator-tokens`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the list of separator tokens. Overwrite the old list.\n     *\n     * @param separatorTokens - Array that contains separator tokens.\n     * @returns Promise containing an EnqueuedTask or null\n     */\n    async updateSeparatorTokens(separatorTokens) {\n        const url = `indexes/${this.uid}/settings/separator-tokens`;\n        const task = await this.httpRequest.put(url, separatorTokens);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the separator tokens list to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSeparatorTokens() {\n        const url = `indexes/${this.uid}/settings/separator-tokens`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// NON-SEPARATOR TOKENS\n    ///\n    /**\n     * Get the list of all non-separator tokens.\n     *\n     * @returns Promise containing array of non-separator tokens\n     */\n    async getNonSeparatorTokens() {\n        const url = `indexes/${this.uid}/settings/non-separator-tokens`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the list of non-separator tokens. Overwrite the old list.\n     *\n     * @param nonSeparatorTokens - Array that contains non-separator tokens.\n     * @returns Promise containing an EnqueuedTask or null\n     */\n    async updateNonSeparatorTokens(nonSeparatorTokens) {\n        const url = `indexes/${this.uid}/settings/non-separator-tokens`;\n        const task = await this.httpRequest.put(url, nonSeparatorTokens);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the non-separator tokens list to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetNonSeparatorTokens() {\n        const url = `indexes/${this.uid}/settings/non-separator-tokens`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// DICTIONARY\n    ///\n    /**\n     * Get the dictionary settings of a Meilisearch index.\n     *\n     * @returns Promise containing the dictionary settings\n     */\n    async getDictionary() {\n        const url = `indexes/${this.uid}/settings/dictionary`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the dictionary settings. Overwrite the old settings.\n     *\n     * @param dictionary - Array that contains the new dictionary settings.\n     * @returns Promise containing an EnqueuedTask or null\n     */\n    async updateDictionary(dictionary) {\n        const url = `indexes/${this.uid}/settings/dictionary`;\n        const task = await this.httpRequest.put(url, dictionary);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the dictionary settings to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetDictionary() {\n        const url = `indexes/${this.uid}/settings/dictionary`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// PROXIMITY PRECISION\n    ///\n    /**\n     * Get the proximity precision settings of a Meilisearch index.\n     *\n     * @returns Promise containing the proximity precision settings\n     */\n    async getProximityPrecision() {\n        const url = `indexes/${this.uid}/settings/proximity-precision`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the proximity precision settings. Overwrite the old settings.\n     *\n     * @param proximityPrecision - String that contains the new proximity\n     *   precision settings.\n     * @returns Promise containing an EnqueuedTask or null\n     */\n    async updateProximityPrecision(proximityPrecision) {\n        const url = `indexes/${this.uid}/settings/proximity-precision`;\n        const task = await this.httpRequest.put(url, proximityPrecision);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the proximity precision settings to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetProximityPrecision() {\n        const url = `indexes/${this.uid}/settings/proximity-precision`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// EMBEDDERS\n    ///\n    /**\n     * Get the embedders settings of a Meilisearch index.\n     *\n     * @returns Promise containing the embedders settings\n     */\n    async getEmbedders() {\n        const url = `indexes/${this.uid}/settings/embedders`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the embedders settings. Overwrite the old settings.\n     *\n     * @param embedders - Object that contains the new embedders settings.\n     * @returns Promise containing an EnqueuedTask or null\n     */\n    async updateEmbedders(embedders) {\n        const url = `indexes/${this.uid}/settings/embedders`;\n        const task = await this.httpRequest.patch(url, embedders);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the embedders settings to its default value\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetEmbedders() {\n        const url = `indexes/${this.uid}/settings/embedders`;\n        const task = await this.httpRequest.delete(url);\n        task.enqueuedAt = new Date(task.enqueuedAt);\n        return task;\n    }\n    ///\n    /// SEARCHCUTOFFMS SETTINGS\n    ///\n    /**\n     * Get the SearchCutoffMs settings.\n     *\n     * @returns Promise containing object of SearchCutoffMs settings\n     */\n    async getSearchCutoffMs() {\n        const url = `indexes/${this.uid}/settings/search-cutoff-ms`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the SearchCutoffMs settings.\n     *\n     * @param searchCutoffMs - Object containing SearchCutoffMsSettings\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateSearchCutoffMs(searchCutoffMs) {\n        const url = `indexes/${this.uid}/settings/search-cutoff-ms`;\n        const task = await this.httpRequest.put(url, searchCutoffMs);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the SearchCutoffMs settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetSearchCutoffMs() {\n        const url = `indexes/${this.uid}/settings/search-cutoff-ms`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// LOCALIZED ATTRIBUTES SETTINGS\n    ///\n    /**\n     * Get the localized attributes settings.\n     *\n     * @returns Promise containing object of localized attributes settings\n     */\n    async getLocalizedAttributes() {\n        const url = `indexes/${this.uid}/settings/localized-attributes`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the localized attributes settings.\n     *\n     * @param localizedAttributes - Localized attributes object\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateLocalizedAttributes(localizedAttributes) {\n        const url = `indexes/${this.uid}/settings/localized-attributes`;\n        const task = await this.httpRequest.put(url, localizedAttributes);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the localized attributes settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetLocalizedAttributes() {\n        const url = `indexes/${this.uid}/settings/localized-attributes`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// FACET SEARCH SETTINGS\n    ///\n    /**\n     * Get the facet search settings.\n     *\n     * @returns Promise containing object of facet search settings\n     */\n    async getFacetSearch() {\n        const url = `indexes/${this.uid}/settings/facet-search`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the facet search settings.\n     *\n     * @param facetSearch - Boolean value\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updateFacetSearch(facetSearch) {\n        const url = `indexes/${this.uid}/settings/facet-search`;\n        const task = await this.httpRequest.put(url, facetSearch);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the facet search settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetFacetSearch() {\n        const url = `indexes/${this.uid}/settings/facet-search`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// PREFIX SEARCH SETTINGS\n    ///\n    /**\n     * Get the prefix search settings.\n     *\n     * @returns Promise containing object of prefix search settings\n     */\n    async getPrefixSearch() {\n        const url = `indexes/${this.uid}/settings/prefix-search`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Update the prefix search settings.\n     *\n     * @param prefixSearch - PrefixSearch value\n     * @returns Promise containing an EnqueuedTask\n     */\n    async updatePrefixSearch(prefixSearch) {\n        const url = `indexes/${this.uid}/settings/prefix-search`;\n        const task = await this.httpRequest.put(url, prefixSearch);\n        return new EnqueuedTask(task);\n    }\n    /**\n     * Reset the prefix search settings.\n     *\n     * @returns Promise containing an EnqueuedTask\n     */\n    async resetPrefixSearch() {\n        const url = `indexes/${this.uid}/settings/prefix-search`;\n        const task = await this.httpRequest.delete(url);\n        return new EnqueuedTask(task);\n    }\n}\nexport { Index };\n//# sourceMappingURL=indexes.js.map","/*\n * Bundle: MeiliSearch\n * Project: MeiliSearch - Javascript API\n * Author: Quentin de Quelen <quentin@meilisearch.com>\n * Copyright: 2019, MeiliSearch\n */\nimport { Index } from \"./indexes.js\";\nimport { ErrorStatusCode } from \"./types.js\";\nimport { HttpRequests } from \"./http-requests.js\";\nimport { TaskClient } from \"./task.js\";\nimport { EnqueuedTask } from \"./enqueued-task.js\";\nimport { BatchClient } from \"./batch.js\";\nexport class MeiliSearch {\n    config;\n    httpRequest;\n    tasks;\n    batches;\n    /**\n     * Creates new MeiliSearch instance\n     *\n     * @param config - Configuration object\n     */\n    constructor(config) {\n        this.config = config;\n        this.httpRequest = new HttpRequests(config);\n        this.tasks = new TaskClient(config);\n        this.batches = new BatchClient(config);\n    }\n    /**\n     * Return an Index instance\n     *\n     * @param indexUid - The index UID\n     * @returns Instance of Index\n     */\n    index(indexUid) {\n        return new Index(this.config, indexUid);\n    }\n    /**\n     * Gather information about an index by calling MeiliSearch and return an\n     * Index instance with the gathered information\n     *\n     * @param indexUid - The index UID\n     * @returns Promise returning Index instance\n     */\n    async getIndex(indexUid) {\n        return new Index(this.config, indexUid).fetchInfo();\n    }\n    /**\n     * Gather information about an index by calling MeiliSearch and return the raw\n     * JSON response\n     *\n     * @param indexUid - The index UID\n     * @returns Promise returning index information\n     */\n    async getRawIndex(indexUid) {\n        return new Index(this.config, indexUid).getRawInfo();\n    }\n    /**\n     * Get all the indexes as Index instances.\n     *\n     * @param parameters - Parameters to browse the indexes\n     * @returns Promise returning array of raw index information\n     */\n    async getIndexes(parameters = {}) {\n        const rawIndexes = await this.getRawIndexes(parameters);\n        const indexes = rawIndexes.results.map((index) => new Index(this.config, index.uid, index.primaryKey));\n        return { ...rawIndexes, results: indexes };\n    }\n    /**\n     * Get all the indexes in their raw value (no Index instances).\n     *\n     * @param parameters - Parameters to browse the indexes\n     * @returns Promise returning array of raw index information\n     */\n    async getRawIndexes(parameters = {}) {\n        const url = `indexes`;\n        return await this.httpRequest.get(url, parameters);\n    }\n    /**\n     * Create a new index\n     *\n     * @param uid - The index UID\n     * @param options - Index options\n     * @returns Promise returning Index instance\n     */\n    async createIndex(uid, options = {}) {\n        return await Index.create(uid, options, this.config);\n    }\n    /**\n     * Update an index\n     *\n     * @param uid - The index UID\n     * @param options - Index options to update\n     * @returns Promise returning Index instance after updating\n     */\n    async updateIndex(uid, options = {}) {\n        return await new Index(this.config, uid).update(options);\n    }\n    /**\n     * Delete an index\n     *\n     * @param uid - The index UID\n     * @returns Promise which resolves when index is deleted successfully\n     */\n    async deleteIndex(uid) {\n        return await new Index(this.config, uid).delete();\n    }\n    /**\n     * Deletes an index if it already exists.\n     *\n     * @param uid - The index UID\n     * @returns Promise which resolves to true when index exists and is deleted\n     *   successfully, otherwise false if it does not exist\n     */\n    async deleteIndexIfExists(uid) {\n        try {\n            await this.deleteIndex(uid);\n            return true;\n        }\n        catch (e) {\n            if (e.code === ErrorStatusCode.INDEX_NOT_FOUND) {\n                return false;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Swaps a list of index tuples.\n     *\n     * @param params - List of indexes tuples to swap.\n     * @returns Promise returning object of the enqueued task\n     */\n    async swapIndexes(params) {\n        const url = \"/swap-indexes\";\n        return await this.httpRequest.post(url, params);\n    }\n    ///\n    /// Multi Search\n    ///\n    /**\n     * Perform multiple search queries.\n     *\n     * It is possible to make multiple search queries on the same index or on\n     * different ones\n     *\n     * @example\n     *\n     * ```ts\n     * client.multiSearch({\n     *   queries: [\n     *     { indexUid: \"movies\", q: \"wonder\" },\n     *     { indexUid: \"books\", q: \"flower\" },\n     *   ],\n     * });\n     * ```\n     *\n     * @param queries - Search queries\n     * @param config - Additional request configuration options\n     * @returns Promise containing the search responses\n     */\n    async multiSearch(queries, config) {\n        const url = `multi-search`;\n        return await this.httpRequest.post(url, queries, undefined, config);\n    }\n    ///\n    /// TASKS\n    ///\n    /**\n     * Get the list of all client tasks\n     *\n     * @param parameters - Parameters to browse the tasks\n     * @returns Promise returning all tasks\n     */\n    async getTasks(parameters = {}) {\n        return await this.tasks.getTasks(parameters);\n    }\n    /**\n     * Get one task on the client scope\n     *\n     * @param taskUid - Task identifier\n     * @returns Promise returning a task\n     */\n    async getTask(taskUid) {\n        return await this.tasks.getTask(taskUid);\n    }\n    /**\n     * Wait for multiple tasks to be finished.\n     *\n     * @param taskUids - Tasks identifier\n     * @param waitOptions - Options on timeout and interval\n     * @returns Promise returning an array of tasks\n     */\n    async waitForTasks(taskUids, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        return await this.tasks.waitForTasks(taskUids, {\n            timeOutMs,\n            intervalMs,\n        });\n    }\n    /**\n     * Wait for a task to be finished.\n     *\n     * @param taskUid - Task identifier\n     * @param waitOptions - Options on timeout and interval\n     * @returns Promise returning an array of tasks\n     */\n    async waitForTask(taskUid, { timeOutMs = 5000, intervalMs = 50 } = {}) {\n        return await this.tasks.waitForTask(taskUid, {\n            timeOutMs,\n            intervalMs,\n        });\n    }\n    /**\n     * Cancel a list of enqueued or processing tasks.\n     *\n     * @param parameters - Parameters to filter the tasks.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async cancelTasks(parameters) {\n        return await this.tasks.cancelTasks(parameters);\n    }\n    /**\n     * Delete a list of tasks.\n     *\n     * @param parameters - Parameters to filter the tasks.\n     * @returns Promise containing an EnqueuedTask\n     */\n    async deleteTasks(parameters = {}) {\n        return await this.tasks.deleteTasks(parameters);\n    }\n    /**\n     * Get all the batches\n     *\n     * @param parameters - Parameters to browse the batches\n     * @returns Promise returning all batches\n     */\n    async getBatches(parameters = {}) {\n        return await this.batches.getBatches(parameters);\n    }\n    /**\n     * Get one batch\n     *\n     * @param uid - Batch identifier\n     * @returns Promise returning a batch\n     */\n    async getBatch(uid) {\n        return await this.batches.getBatch(uid);\n    }\n    ///\n    /// KEYS\n    ///\n    /**\n     * Get all API keys\n     *\n     * @param parameters - Parameters to browse the indexes\n     * @returns Promise returning an object with keys\n     */\n    async getKeys(parameters = {}) {\n        const url = `keys`;\n        const keys = await this.httpRequest.get(url, parameters);\n        keys.results = keys.results.map((key) => ({\n            ...key,\n            createdAt: new Date(key.createdAt),\n            updatedAt: new Date(key.updatedAt),\n        }));\n        return keys;\n    }\n    /**\n     * Get one API key\n     *\n     * @param keyOrUid - Key or uid of the API key\n     * @returns Promise returning a key\n     */\n    async getKey(keyOrUid) {\n        const url = `keys/${keyOrUid}`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Create one API key\n     *\n     * @param options - Key options\n     * @returns Promise returning a key\n     */\n    async createKey(options) {\n        const url = `keys`;\n        return await this.httpRequest.post(url, options);\n    }\n    /**\n     * Update one API key\n     *\n     * @param keyOrUid - Key\n     * @param options - Key options\n     * @returns Promise returning a key\n     */\n    async updateKey(keyOrUid, options) {\n        const url = `keys/${keyOrUid}`;\n        return await this.httpRequest.patch(url, options);\n    }\n    /**\n     * Delete one API key\n     *\n     * @param keyOrUid - Key\n     * @returns\n     */\n    async deleteKey(keyOrUid) {\n        const url = `keys/${keyOrUid}`;\n        return await this.httpRequest.delete(url);\n    }\n    ///\n    /// HEALTH\n    ///\n    /**\n     * Checks if the server is healthy, otherwise an error will be thrown.\n     *\n     * @returns Promise returning an object with health details\n     */\n    async health() {\n        const url = `health`;\n        return await this.httpRequest.get(url);\n    }\n    /**\n     * Checks if the server is healthy, return true or false.\n     *\n     * @returns Promise returning a boolean\n     */\n    async isHealthy() {\n        try {\n            const url = `health`;\n            await this.httpRequest.get(url);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    ///\n    /// STATS\n    ///\n    /**\n     * Get the stats of all the database\n     *\n     * @returns Promise returning object of all the stats\n     */\n    async getStats() {\n        const url = `stats`;\n        return await this.httpRequest.get(url);\n    }\n    ///\n    /// VERSION\n    ///\n    /**\n     * Get the version of MeiliSearch\n     *\n     * @returns Promise returning object with version details\n     */\n    async getVersion() {\n        const url = `version`;\n        return await this.httpRequest.get(url);\n    }\n    ///\n    /// DUMPS\n    ///\n    /**\n     * Creates a dump\n     *\n     * @returns Promise returning object of the enqueued task\n     */\n    async createDump() {\n        const url = `dumps`;\n        const task = await this.httpRequest.post(url);\n        return new EnqueuedTask(task);\n    }\n    ///\n    /// SNAPSHOTS\n    ///\n    /**\n     * Creates a snapshot\n     *\n     * @returns Promise returning object of the enqueued task\n     */\n    async createSnapshot() {\n        const url = `snapshots`;\n        const task = await this.httpRequest.post(url);\n        return new EnqueuedTask(task);\n    }\n}\n//# sourceMappingURL=meilisearch.js.map","import { MeiliSearch } from \"meilisearch\";\nimport \"./styles.css\";\n\n/**\n * Ghost Meilisearch Search UI\n * A search UI for Ghost blogs using Meilisearch\n */\nclass GhostMeilisearchSearch {\n    constructor(config = {}) {\n        // Default configuration\n        const defaultConfig = {\n            meilisearchHost: null,\n            meilisearchApiKey: null,\n            indexName: null,\n            commonSearches: [],\n            theme: \"system\",\n            enableHighlighting: true,\n            searchFields: {\n                title: { weight: 5, highlight: true },\n                plaintext: { weight: 4, highlight: true },\n                excerpt: { weight: 3, highlight: true },\n                html: { weight: 1, highlight: true },\n            },\n            // AI Search Configuration\n            enableAiSearch: false,\n            aiSearchEmbedder: null,\n            aiSearchLimit: 3, // Limit for AI results\n        };\n\n        // Merge default config with user config\n        this.config = {\n            ...defaultConfig,\n            ...config,\n        };\n\n        // Initialize state\n        this.state = {\n            isOpen: false,\n            query: \"\",\n            normalResults: [], // Renamed from results\n            aiResults: [], // Added for AI search results\n            loading: false,\n            selectedIndex: -1,\n            error: null,\n        };\n\n        // Initialize MeiliSearch client\n        this.client = new MeiliSearch({\n            host: this.config.meilisearchHost,\n            apiKey: this.config.meilisearchApiKey,\n        });\n\n        // Get index\n        this.index = this.client.index(this.config.indexName);\n\n        // Create DOM elements\n        this.createDOMElements();\n\n        // Apply theme\n        this.applyTheme();\n\n        // Setup color scheme observer\n        this.setupColorSchemeObserver();\n\n        // Add event listeners\n        this.addEventListeners();\n\n        // Populate common searches\n        this.populateCommonSearches();\n\n        // Adjust modal for screen size\n        this.adjustModalForScreenSize();\n    }\n\n    /**\n     * Create DOM elements for the search UI\n     */\n    createDOMElements() {\n        // Create wrapper element\n        this.wrapper = document.createElement(\"div\");\n        this.wrapper.id = \"ms-search-wrapper\";\n        document.body.appendChild(this.wrapper);\n\n        // Create modal element\n        this.modal = document.createElement(\"div\");\n        this.modal.id = \"ms-search-modal\";\n        this.modal.classList.add(\"hidden\");\n        this.wrapper.appendChild(this.modal);\n\n        // Create modal content\n        this.modal.innerHTML = `\n      <div class=\"ms-backdrop\"></div>\n      <div class=\"ms-modal-container\">\n        <button class=\"ms-close-button\" aria-label=\"Close search\">&times;</button>\n        <div class=\"ms-modal-content\">\n          <div class=\"ms-search-header\">\n            <input type=\"text\" class=\"ms-search-input\" placeholder=\"Search...\" aria-label=\"Search\">\n          </div>\n          <div class=\"ms-keyboard-hints\">\n            <span><span class=\"ms-kbd\">↑</span><span class=\"ms-kbd\">↓</span> to navigate</span>\n            <span><span class=\"ms-kbd\">↵</span> to select</span>\n            <span><span class=\"ms-kbd\">ESC</span> to close</span>\n          </div>\n          <div class=\"ms-results-container\">\n            <div class=\"ms-common-searches\">\n              <div class=\"ms-common-searches-title\">Common searches</div>\n              <div class=\"ms-common-searches-list\"></div>\n            </div>\n            <div class=\"ms-ai-results-section hidden\">\n              <div class=\"ms-results-section-title\">AI Suggestions</div>\n              <ul class=\"ms-ai-hits-list\"></ul>\n            </div>\n            <div class=\"ms-normal-results-section\">\n              <div class=\"ms-results-section-title\">Keyword Matches</div>\n              <ul class=\"ms-normal-hits-list\"></ul>\n            </div>\n            <div class=\"ms-loading-state\">\n              <div class=\"ms-loading-spinner\"></div>\n              <div>Searching...</div>\n            </div>\n            <div class=\"ms-empty-state\">\n              <div class=\"ms-empty-message\">No results found for your search.</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n        // Get references to elements\n        this.searchInput = this.modal.querySelector(\".ms-search-input\");\n        this.closeButton = this.modal.querySelector(\".ms-close-button\");\n        this.aiResultsSection = this.modal.querySelector(\n            \".ms-ai-results-section\"\n        );\n        this.aiHitsList = this.modal.querySelector(\".ms-ai-hits-list\");\n        this.normalResultsSection = this.modal.querySelector(\n            \".ms-normal-results-section\"\n        ); // Added for potential styling/visibility control\n        this.normalHitsList = this.modal.querySelector(\".ms-normal-hits-list\"); // Renamed from hitsList\n        this.loadingState = this.modal.querySelector(\".ms-loading-state\");\n        this.emptyState = this.modal.querySelector(\".ms-empty-state\");\n        this.commonSearchesList = this.modal.querySelector(\n            \".ms-common-searches-list\"\n        );\n        this.commonSearchesSection = this.modal.querySelector(\n            \".ms-common-searches\"\n        );\n\n        // Populate common searches\n        this.populateCommonSearches();\n\n        // Apply theme based on page color scheme\n        this.applyTheme();\n    }\n\n    /**\n     * Populate common searches section\n     */\n    populateCommonSearches() {\n        if (\n            !this.config.commonSearches ||\n            this.config.commonSearches.length === 0\n        ) {\n            this.commonSearchesSection.classList.add(\"hidden\");\n            return;\n        }\n\n        this.commonSearchesList.innerHTML = \"\";\n        this.config.commonSearches.forEach((search) => {\n            const button = document.createElement(\"button\");\n            button.classList.add(\"ms-common-search-btn\");\n            button.textContent = search;\n            button.addEventListener(\"click\", () => {\n                this.searchInput.value = search;\n                this.state.query = search;\n                this.performSearch();\n            });\n            this.commonSearchesList.appendChild(button);\n        });\n    }\n\n    /**\n     * Apply theme based on page color scheme\n     */\n    applyTheme() {\n        // First check for data-color-scheme on html or body element\n        const htmlColorScheme =\n            document.documentElement.getAttribute(\"data-color-scheme\");\n        const bodyColorScheme = document.body.getAttribute(\"data-color-scheme\");\n        const pageColorScheme =\n            htmlColorScheme || bodyColorScheme || this.config.theme;\n\n        // Remove any existing classes\n        this.wrapper.classList.remove(\"dark\", \"light\");\n\n        if (pageColorScheme === \"dark\") {\n            this.wrapper.classList.add(\"dark\");\n        } else if (pageColorScheme === \"system\") {\n            // Check system preference\n            const prefersDark = window.matchMedia(\n                \"(prefers-color-scheme: dark)\"\n            ).matches;\n            if (prefersDark) {\n                this.wrapper.classList.add(\"dark\");\n            } else {\n                this.wrapper.classList.add(\"light\");\n            }\n\n            // Listen for changes in system preference\n            window\n                .matchMedia(\"(prefers-color-scheme: dark)\")\n                .addEventListener(\"change\", (e) => {\n                    this.wrapper.classList.remove(\"dark\", \"light\");\n                    if (e.matches) {\n                        this.wrapper.classList.add(\"dark\");\n                    } else {\n                        this.wrapper.classList.add(\"light\");\n                    }\n                });\n        } else {\n            // Default to light\n            this.wrapper.classList.add(\"light\");\n        }\n\n        // Add MutationObserver to watch for changes in data-color-scheme\n        this.setupColorSchemeObserver();\n    }\n\n    /**\n     * Set up observer to watch for changes in data-color-scheme\n     */\n    setupColorSchemeObserver() {\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (\n                    mutation.type === \"attributes\" &&\n                    mutation.attributeName === \"data-color-scheme\"\n                ) {\n                    this.applyTheme();\n                }\n            });\n        });\n\n        // Observe both html and body for changes\n        observer.observe(document.documentElement, {\n            attributes: true,\n            attributeFilter: [\"data-color-scheme\"],\n        });\n        observer.observe(document.body, {\n            attributes: true,\n            attributeFilter: [\"data-color-scheme\"],\n        });\n    }\n\n    /**\n     * Add event listeners\n     */\n    addEventListeners() {\n        // Close button click\n        this.closeButton.addEventListener(\"click\", () => this.close());\n\n        // Backdrop click\n        this.modal\n            .querySelector(\".ms-backdrop\")\n            .addEventListener(\"click\", () => this.close());\n\n        // Search input\n        this.searchInput.addEventListener(\"input\", () => {\n            this.state.query = this.searchInput.value;\n            this.performSearch();\n        });\n\n        // Keyboard navigation\n        document.addEventListener(\"keydown\", this.handleKeyDown.bind(this));\n\n        // Add click event to search triggers\n        document.querySelectorAll(\"[data-ghost-search]\").forEach((el) => {\n            el.addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                this.open();\n            });\n        });\n\n        // Keyboard shortcuts\n        document.addEventListener(\"keydown\", (e) => {\n            // Cmd+K or Ctrl+K\n            if ((e.metaKey || e.ctrlKey) && e.key === \"k\") {\n                e.preventDefault();\n                this.open();\n            }\n\n            // Forward slash (/) when not in an input\n            if (\n                e.key === \"/\" &&\n                ![\"INPUT\", \"TEXTAREA\"].includes(document.activeElement.tagName)\n            ) {\n                e.preventDefault();\n                this.open();\n            }\n        });\n\n        // Handle window resize\n        window.addEventListener(\"resize\", () => {\n            if (this.state.isOpen) {\n                // Adjust modal position and size on resize\n                this.adjustModalForScreenSize();\n            }\n        });\n    }\n\n    /**\n     * Handle keyboard navigation\n     */\n    handleKeyDown(e) {\n        if (!this.state.isOpen) return;\n\n        switch (e.key) {\n            case \"Escape\":\n                e.preventDefault();\n                this.close();\n                break;\n            case \"ArrowDown\":\n                e.preventDefault(); // Prevent page scrolling\n                this.navigateResults(1);\n                break;\n            case \"ArrowUp\":\n                e.preventDefault(); // Prevent page scrolling\n                this.navigateResults(-1);\n                break;\n            case \"Enter\":\n                e.preventDefault();\n                this.selectResult();\n                break;\n        }\n    }\n\n    /**\n     * Adjust modal for different screen sizes\n     */\n    adjustModalForScreenSize() {\n        const isMobile = window.innerWidth < 640;\n\n        if (isMobile) {\n            // Mobile optimizations\n            this.modal.querySelector(\".ms-modal-content\").style.height =\n                \"100vh\";\n            this.modal.querySelector(\".ms-results-container\").style.maxHeight =\n                \"calc(100vh - 7rem)\";\n        } else {\n            // Desktop optimizations\n            this.modal.querySelector(\".ms-modal-content\").style.height = \"\";\n            this.modal.querySelector(\".ms-results-container\").style.maxHeight =\n                \"\";\n        }\n    }\n\n    /**\n     * Navigate through search results\n     */\n    navigateResults(direction) {\n        // Combine results from both lists for navigation\n        const combinedResults = [\n            ...(this.config.enableAiSearch ? this.state.aiResults : []),\n            ...this.state.normalResults,\n        ];\n\n        const totalResults = combinedResults.length;\n        if (totalResults === 0) return;\n\n        // Calculate new index\n        let newIndex = this.state.selectedIndex + direction;\n\n        // Wrap around\n        if (newIndex < 0) {\n            newIndex = totalResults - 1;\n        } else if (newIndex >= totalResults) {\n            newIndex = 0;\n        }\n\n        // Update selected index\n        this.state.selectedIndex = newIndex;\n\n        // Update UI\n        this.updateSelectedResult();\n    }\n\n    /**\n     * Update the selected result in the UI across both lists\n     */\n    updateSelectedResult() {\n        // Get all result links from both lists\n        const resultElements = this.modal.querySelectorAll(\".ms-result-link\");\n\n        // Remove selected class from all results\n        resultElements.forEach((el) => el.classList.remove(\"ms-selected\"));\n\n        // Add selected class to current result if index is valid\n        if (\n            this.state.selectedIndex >= 0 &&\n            this.state.selectedIndex < resultElements.length\n        ) {\n            const selectedElement = resultElements[this.state.selectedIndex];\n            selectedElement.classList.add(\"ms-selected\");\n\n            // Scroll into view if needed\n            const container = this.modal.querySelector(\".ms-results-container\");\n            // Get position relative to the container, not just the list\n            const elementTop = selectedElement.offsetTop - container.offsetTop;\n            const elementBottom = elementTop + selectedElement.offsetHeight;\n            const containerScrollTop = container.scrollTop;\n            const containerVisibleHeight = container.offsetHeight;\n\n            if (elementTop < containerScrollTop) {\n                // Element is above the visible area\n                container.scrollTop = elementTop;\n            } else if (\n                elementBottom >\n                containerScrollTop + containerVisibleHeight\n            ) {\n                // Element is below the visible area\n                container.scrollTop = elementBottom - containerVisibleHeight;\n            }\n            // No scrolling needed if element is already within the visible area\n        }\n    }\n\n    /**\n     * Select the current result from the combined list\n     */\n    selectResult() {\n        // Combine results from both lists\n        const combinedResults = [\n            ...(this.config.enableAiSearch ? this.state.aiResults : []),\n            ...this.state.normalResults,\n        ];\n\n        const totalResults = combinedResults.length;\n        if (\n            totalResults === 0 ||\n            this.state.selectedIndex < 0 ||\n            this.state.selectedIndex >= totalResults\n        ) {\n            return; // No valid selection\n        }\n\n        const selectedResult = combinedResults[this.state.selectedIndex];\n\n        // Close the search UI first\n        this.close();\n\n        // Then redirect to the URL or slug\n        const targetUrl =\n            selectedResult.url ||\n            (selectedResult.slug ? `/${selectedResult.slug}` : null);\n\n        if (targetUrl) {\n            // Use setTimeout to ensure the close animation can start before navigation\n            setTimeout(() => {\n                window.location.href = targetUrl;\n            }, 10);\n        } else {\n            console.warn(\"Selected result has no URL or slug:\", selectedResult);\n        }\n    }\n\n    /**\n     * Open the search modal\n     */\n    open() {\n        this.state.isOpen = true;\n        this.modal.classList.remove(\"hidden\");\n        this.searchInput.focus();\n\n        // Check if search input is empty and hide elements if needed\n        if (this.state.query.trim() === \"\") {\n            this.modal\n                .querySelector(\".ms-keyboard-hints\")\n                .classList.add(\"hidden\");\n            this.modal\n                .querySelector(\".ms-results-container\")\n                .classList.add(\"ms-results-empty\");\n        } else {\n            this.modal\n                .querySelector(\".ms-keyboard-hints\")\n                .classList.remove(\"hidden\");\n            this.modal\n                .querySelector(\".ms-results-container\")\n                .classList.remove(\"ms-results-empty\");\n        }\n\n        // Prevent body scrolling\n        document.body.style.overflow = \"hidden\";\n\n        // Adjust for screen size\n        this.adjustModalForScreenSize();\n    }\n\n    /**\n     * Close the search modal\n     */\n    close() {\n        this.state.isOpen = false;\n        this.modal.classList.add(\"hidden\");\n\n        // Reset state\n        this.state.selectedIndex = -1;\n\n        // Allow body scrolling\n        document.body.style.overflow = \"\";\n    }\n\n    /**\n     * Extract text between double quotes for exact phrase matching\n     * @param {string} text - The text to extract from\n     * @returns {string|null} The extracted text or null if no quoted phrase found\n     */\n    extractTextBetweenQuotes(text) {\n        if (!text) return null;\n        const match = text.match(/\"([^\"]+)\"/);\n        return match ? match[1] : null;\n    }\n\n    /**\n     * Perform search with current query\n     */\n    async performSearch() {\n        const query = this.state.query.trim();\n\n        // Reset results and hide AI section initially\n        this.state.aiResults = [];\n        this.state.normalResults = [];\n        this.aiResultsSection.classList.add(\"hidden\");\n        this.normalResultsSection.classList.remove(\"hidden\"); // Ensure normal section is visible\n\n        // Show/hide common searches based on query\n        if (query === \"\") {\n            this.commonSearchesSection.classList.remove(\"hidden\");\n            this.aiHitsList.innerHTML = \"\"; // Clear AI list\n            this.normalHitsList.innerHTML = \"\"; // Clear normal list\n            this.loadingState.classList.remove(\"active\");\n            this.emptyState.classList.remove(\"active\");\n\n            // Hide keyboard hints and results container when search is empty\n            this.modal\n                .querySelector(\".ms-keyboard-hints\")\n                .classList.add(\"hidden\");\n            this.modal\n                .querySelector(\".ms-results-container\")\n                .classList.add(\"ms-results-empty\");\n\n            return;\n        } else {\n            this.commonSearchesSection.classList.add(\"hidden\");\n\n            // Show keyboard hints and results container when search has content\n            this.modal\n                .querySelector(\".ms-keyboard-hints\")\n                .classList.remove(\"hidden\");\n            this.modal\n                .querySelector(\".ms-results-container\")\n                .classList.remove(\"ms-results-empty\");\n        }\n\n        // Set loading state\n        this.state.loading = true;\n        this.loadingState.classList.add(\"active\");\n        this.emptyState.classList.remove(\"active\");\n\n        try {\n            // Prepare base search parameters\n            const baseSearchParams = {\n                limit: 100, // Consider making this configurable?\n                attributesToHighlight: Object.entries(this.config.searchFields)\n                    .filter(([_, config]) => config.highlight)\n                    .map(([field]) => field),\n                attributesToRetrieve: [\n                    \"title\",\n                    \"url\",\n                    \"excerpt\",\n                    \"plaintext\",\n                    \"tags\",\n                    \"slug\", // Ensure slug is retrieved\n                    \"visibility\", // <-- Add visibility here\n                    // Add any other fields needed for display or logic\n                ],\n                highlightPreTag: \"<em>\", // Ensure consistent highlighting tags\n                highlightPostTag: \"</em>\",\n            };\n\n            let aiSearchPromise = Promise.resolve({ hits: [] }); // Default to empty results\n            let normalSearchPromise;\n\n            // --- Conditional Search Execution ---\n            if (this.config.enableAiSearch && this.config.aiSearchEmbedder) {\n                // --- AI Search Enabled ---\n                this.aiResultsSection.classList.remove(\"hidden\"); // Show AI section\n\n                // AI Search Parameters (using hybrid)\n                const aiSearchParams = {\n                    ...baseSearchParams,\n                    limit: this.config.aiSearchLimit, // Apply AI-specific limit\n                    hybrid: {\n                        embedder: this.config.aiSearchEmbedder,\n                        // semanticRatio: 0.9 // Optional: Tune ratio if needed\n                    },\n                    // attributesToSearchOn: undefined, // Let hybrid handle searchable attributes\n                    // matchingStrategy: undefined // Let hybrid handle matching\n                };\n                aiSearchPromise = this.index.search(query, aiSearchParams);\n\n                // Normal Search Parameters (when AI is also enabled)\n                const normalSearchParams = {\n                    ...baseSearchParams,\n                    attributesToSearchOn: [\"title\", \"plaintext\", \"excerpt\"], // Specify for keyword search\n                    matchingStrategy: \"last\", // Default strategy for keyword search\n                };\n                normalSearchPromise = this.index.search(\n                    query,\n                    normalSearchParams\n                );\n            } else {\n                // --- AI Search Disabled (Standard Search Only) ---\n                this.aiResultsSection.classList.add(\"hidden\"); // Ensure AI section is hidden\n\n                // Check for exact phrase matching (only when AI is disabled)\n                const hasQuotes = query.startsWith('\"') && query.endsWith('\"');\n                const exactPhrase = this.extractTextBetweenQuotes(query);\n                const isExactMatch = hasQuotes || exactPhrase !== null;\n\n                const normalSearchParams = {\n                    ...baseSearchParams,\n                    attributesToSearchOn: [\"title\", \"plaintext\", \"excerpt\"],\n                };\n\n                if (isExactMatch) {\n                    // Handle exact phrase search (existing logic)\n                    const searchPhrase = hasQuotes\n                        ? query.slice(1, -1)\n                        : exactPhrase;\n                    normalSearchParams.matchingStrategy = \"all\"; // Use 'all' for initial fetch\n\n                    // Perform initial search and then filter manually\n                    normalSearchPromise = this.index\n                        .search(searchPhrase, normalSearchParams)\n                        .then((initialResults) => {\n                            if (initialResults.hits.length > 0) {\n                                const lowerPhrase = searchPhrase.toLowerCase();\n                                const filteredHits = initialResults.hits.filter(\n                                    (hit) =>\n                                        (hit.title &&\n                                            hit.title\n                                                .toLowerCase()\n                                                .includes(lowerPhrase)) ||\n                                        (hit.plaintext &&\n                                            hit.plaintext\n                                                .toLowerCase()\n                                                .includes(lowerPhrase)) ||\n                                        (hit.excerpt &&\n                                            hit.excerpt\n                                                .toLowerCase()\n                                                .includes(lowerPhrase))\n                                );\n                                // Return the structure MeiliSearch expects, with filtered hits\n                                return {\n                                    ...initialResults,\n                                    hits: filteredHits,\n                                };\n                            }\n                            return initialResults; // Return original if no hits initially\n                        });\n                } else {\n                    // Regular keyword search\n                    normalSearchParams.matchingStrategy = \"last\";\n                    normalSearchPromise = this.index.search(\n                        query,\n                        normalSearchParams\n                    );\n                }\n            }\n\n            // --- Execute Searches and Process Results ---\n            const [aiResults, normalResults] = await Promise.all([\n                aiSearchPromise,\n                normalSearchPromise,\n            ]);\n\n            // Update state\n            this.state.loading = false;\n            this.state.aiResults = aiResults.hits || [];\n            this.state.normalResults = normalResults.hits || [];\n            this.state.selectedIndex = -1; // Reset selection\n            this.state.error = null; // Clear previous errors\n\n            // Update UI\n            this.renderResults(); // Call renderResults without arguments\n\n            // Hide loading state\n            this.loadingState.classList.remove(\"active\");\n\n            // Show empty state if *both* result sets are empty\n            if (\n                this.state.aiResults.length === 0 &&\n                this.state.normalResults.length === 0\n            ) {\n                this.emptyState.classList.add(\"active\");\n                this.emptyState.querySelector(\".ms-empty-message\").textContent =\n                    \"No results found for your search.\";\n            }\n        } catch (error) {\n            console.error(\"Search error:\", error);\n            this.state.loading = false;\n            this.state.error = error;\n            this.state.aiResults = []; // Clear results on error\n            this.state.normalResults = [];\n            this.loadingState.classList.remove(\"active\");\n            this.aiResultsSection.classList.add(\"hidden\"); // Hide AI section on error\n\n            // Show empty state with error message\n            this.emptyState.classList.add(\"active\");\n            this.emptyState.querySelector(\".ms-empty-message\").textContent =\n                \"An error occurred while searching. Please try again.\";\n\n            // Render empty results\n            this.renderResults();\n        }\n    }\n\n    /**\n     * Render search results based on current state\n     */\n    renderResults() {\n        // Clear previous results\n        this.aiHitsList.innerHTML = \"\";\n        this.normalHitsList.innerHTML = \"\";\n\n        const query = this.state.query.trim();\n\n        // Render AI Results\n        if (this.config.enableAiSearch && this.state.aiResults.length > 0) {\n            this.aiResultsSection.classList.remove(\"hidden\");\n            this.state.aiResults.forEach((hit) => {\n                const hitElement = this._createHitElement(hit, query);\n                this.aiHitsList.appendChild(hitElement);\n            });\n        } else {\n            this.aiResultsSection.classList.add(\"hidden\");\n        }\n\n        // Render Normal Results\n        if (this.state.normalResults.length > 0) {\n            this.normalResultsSection.classList.remove(\"hidden\"); // Ensure section is visible\n            this.state.normalResults.forEach((hit) => {\n                const hitElement = this._createHitElement(hit, query);\n                this.normalHitsList.appendChild(hitElement);\n            });\n        } else {\n            // Optionally hide the \"Keyword Matches\" section if AI is enabled and has results, but normal doesn't\n            // if (this.config.enableAiSearch && this.state.aiResults.length > 0) {\n            //     this.normalResultsSection.classList.add('hidden');\n            // } else {\n            this.normalResultsSection.classList.remove(\"hidden\"); // Default: keep visible if it's the only potential section\n            // }\n        }\n\n        // Update selection state (important after re-rendering)\n        this.updateSelectedResult();\n    }\n\n    /**\n     * Creates a single hit element (<li>) for the results list.\n     * @param {object} hit - The MeiliSearch hit object.\n     * @param {string} query - The current search query for highlighting.\n     * @returns {HTMLElement} The created list item element.\n     * @private\n     */\n    _createHitElement(hit, query) {\n        console.log(\"--- Processing Hit ---\", JSON.stringify(hit)); // DEBUG: Log the raw hit\n        const li = document.createElement(\"li\");\n        const visibility = hit.visibility || \"public\"; // Default to public if missing\n        console.log(\"Determined visibility:\", visibility); // DEBUG: Log determined visibility\n\n        // --- Helper for basic highlighting ---\n        const highlightText = (text, terms) => {\n            if (\n                !this.config.enableHighlighting ||\n                !terms ||\n                terms.length === 0 ||\n                !text\n            ) {\n                return text;\n            }\n            let highlightedText = text;\n            terms.forEach((term) => {\n                try {\n                    const escapedTerm = term.replace(\n                        /[.*+?^${}()|[\\]\\\\]/g,\n                        \"\\\\$&\"\n                    );\n                    const regex = new RegExp(`(${escapedTerm})`, \"gi\");\n                    highlightedText = highlightedText.replace(\n                        regex,\n                        \"<em>$1</em>\"\n                    );\n                } catch (e) {\n                    console.warn(\"Error highlighting term:\", term, e);\n                }\n            });\n            return highlightedText;\n        };\n\n        // --- Get query terms for basic highlighting ---\n        const queryTerms = query\n            ? query.split(/\\s+/).filter((w) => w.length >= 2)\n            : [];\n\n        // --- Create result link (common logic) ---\n        const link = document.createElement(\"a\");\n        if (hit.url) {\n            link.href = hit.url;\n        } else if (hit.slug) {\n            link.href = `/${hit.slug}`;\n        } else {\n            link.href = \"#\";\n            link.style.pointerEvents = \"none\";\n        }\n        link.classList.add(\"ms-result-link\");\n        link.addEventListener(\"click\", (e) => {\n            if (link.style.pointerEvents === \"none\") {\n                e.preventDefault();\n                return;\n            }\n            e.preventDefault();\n            this.close();\n            setTimeout(() => {\n                window.location.href = link.href;\n            }, 10);\n        });\n\n        // --- Create result item container (common logic) ---\n        const resultItem = document.createElement(\"div\");\n        resultItem.classList.add(\"ms-result-item\");\n\n        // --- Title ---\n        const title = document.createElement(\"h3\");\n        title.classList.add(\"ms-result-title\");\n        let titleContent = hit.title || \"Untitled\";\n\n        // --- Excerpt / Content ---\n        const excerpt = document.createElement(\"p\");\n        excerpt.classList.add(\"ms-result-excerpt\");\n        let excerptContent = \"\";\n\n        // --- Conditional Rendering based on Visibility ---\n        if (visibility === \"public\") {\n            // --- Public Post Rendering (Existing Logic) ---\n\n            // Title Highlighting (prefer _formatted)\n            const formattedTitle =\n                this.config.enableHighlighting &&\n                (hit._formatted?.title || hit._highlightResult?.title?.value);\n            if (formattedTitle) {\n                titleContent = formattedTitle;\n            } else {\n                // Fallback to basic highlight if _formatted not available\n                titleContent = highlightText(titleContent, queryTerms);\n            }\n\n            // Excerpt Snippet Calculation and Highlighting\n            let textContent = hit.plaintext || hit.excerpt || \"\";\n            if (query && this.config.enableHighlighting) {\n                const exactPhrase = this.extractTextBetweenQuotes(query);\n                const hasQuotes = query.startsWith('\"') && query.endsWith('\"');\n                const phraseToHighlight =\n                    exactPhrase || (hasQuotes ? query.slice(1, -1) : null);\n                const wordsToHighlight = phraseToHighlight\n                    ? []\n                    : queryTerms.sort((a, b) => b.length - a.length);\n\n                let firstMatchPos = -1;\n                let matchLength = 0;\n                const lowerTextContent = textContent.toLowerCase();\n\n                if (phraseToHighlight) {\n                    const lowerPhrase = phraseToHighlight.toLowerCase();\n                    const pos = lowerTextContent.indexOf(lowerPhrase);\n                    if (pos !== -1) {\n                        firstMatchPos = pos;\n                        matchLength = phraseToHighlight.length;\n                    }\n                } else {\n                    for (const word of wordsToHighlight) {\n                        const lowerWord = word.toLowerCase();\n                        const pos = lowerTextContent.indexOf(lowerWord);\n                        if (\n                            pos !== -1 &&\n                            (firstMatchPos === -1 || pos < firstMatchPos)\n                        ) {\n                            firstMatchPos = pos;\n                            matchLength = word.length;\n                        }\n                    }\n                }\n\n                let tempExcerpt = \"\";\n                if (firstMatchPos !== -1) {\n                    const snippetRadius = 60;\n                    const startPos = Math.max(0, firstMatchPos - snippetRadius);\n                    const endPos = Math.min(\n                        textContent.length,\n                        firstMatchPos + matchLength + snippetRadius\n                    );\n                    tempExcerpt = textContent.substring(startPos, endPos);\n                    if (startPos > 0) tempExcerpt = \"...\" + tempExcerpt;\n                    if (endPos < textContent.length)\n                        tempExcerpt = tempExcerpt + \"...\";\n                } else {\n                    tempExcerpt =\n                        textContent.substring(0, 150) +\n                        (textContent.length > 150 ? \"...\" : \"\");\n                }\n\n                excerptContent = tempExcerpt;\n                const termsToHighlight = phraseToHighlight\n                    ? [phraseToHighlight]\n                    : wordsToHighlight;\n                excerptContent = highlightText(\n                    excerptContent,\n                    termsToHighlight\n                ); // Use helper\n            } else {\n                // Highlighting disabled or no query, use truncated content\n                excerptContent =\n                    textContent.substring(0, 150) +\n                    (textContent.length > 150 ? \"...\" : \"\");\n            }\n        } else {\n            // --- Non-Public Post Rendering (Simpler Logic) ---\n            titleContent = hit.title || \"Untitled\";\n            // Use raw excerpt, fallback to truncated plaintext\n            // Use raw excerpt only, default to empty string if missing\n            excerptContent = hit.excerpt || \"\";\n\n            // Apply basic highlighting\n            titleContent = highlightText(titleContent, queryTerms);\n            // excerptContent = highlightText(excerptContent, queryTerms); // Skip highlighting excerpt for non-public\n        }\n        console.log(\n            \"Final excerptContent before setting HTML:\",\n            excerptContent\n        ); // DEBUG: Log final excerpt content\n        // --- Set content (common logic) ---\n        title.innerHTML = titleContent;\n        excerpt.innerHTML = excerptContent;\n        excerpt.innerHTML = excerptContent;\n\n        // --- Append elements (common logic) ---\n        resultItem.appendChild(title);\n        resultItem.appendChild(excerpt);\n        link.appendChild(resultItem);\n        li.appendChild(link);\n\n        return li;\n    }\n} // End of GhostMeilisearchSearch class\n\n// Initialize search if configuration is available\nif (window.__MS_SEARCH_CONFIG__) {\n    window.ghostMeilisearchSearch = new GhostMeilisearchSearch(\n        window.__MS_SEARCH_CONFIG__\n    );\n}\n\n// Add a utility method to help with initialization\nGhostMeilisearchSearch.initialize = function (config) {\n    if (!window.ghostMeilisearchSearch) {\n        window.ghostMeilisearchSearch = new GhostMeilisearchSearch(config);\n    }\n    return window.ghostMeilisearchSearch;\n};\n\nexport default GhostMeilisearchSearch;\n"],"names":["MeiliSearchError","Error","name","constructor","params","super","MeiliSearchApiError","cause","response","responseBody","message","status","statusText","this","undefined","MeiliSearchRequestError","url","MeiliSearchTimeOutError","versionErrorHintMessage","method","removeUndefinedFromObject","obj","Object","entries","reduce","acc","curEntry","key","val","async","sleep","ms","Promise","resolve","setTimeout","toQueryParams","parameters","keys","value","Array","isArray","join","Date","toISOString","createHeaders","config","agentHeader","packageAgent","authorization","headers","headerPair","clonedHeaders","forEach","assign","cloneAndParseHeaders","requestConfig","apiKey","clientAgents","clients","concat","HttpRequests","httpClient","requestTimeout","timeout","host","startsWith","addProtocolIfNotPresent","endsWith","constructHostURL","URL","request","body","constructURL","queryParams","URLSearchParams","filter","x","map","set","search","toString","JSON","stringify","responsePromise","fetchWithTimeout","catch","error","text","parsedResponse","parse","ok","options","reject","promises","fetch","timeoutId","timeoutPromise","_","push","race","then","finally","clearTimeout","get","post","data","put","patch","EnqueuedTask","taskUid","indexUid","type","enqueuedAt","task","Task","uid","batchUid","canceledBy","details","duration","startedAt","finishedAt","TaskClient","httpRequest","getTask","taskItem","getTasks","tasks","results","waitForTask","timeOutMs","intervalMs","startingTime","now","TaskStatus","TASK_ENQUEUED","TASK_PROCESSING","includes","waitForTasks","taskUids","cancelTasks","deleteTasks","delete","Batch","stats","progress","batch","BatchClient","getBatch","getBatches","batches","ErrorStatusCode","Index","primaryKey","createdAt","updatedAt","query","q","searchGet","getParams","parseFilter","sort","facets","attributesToRetrieve","attributesToCrop","attributesToHighlight","vector","attributesToSearchOn","searchForFacetValues","searchSimilarDocuments","getRawInfo","res","fetchInfo","fetchPrimaryKey","create","req","update","indexUids","getStats","getDocuments","fields","e","getDocument","documentId","addDocuments","documents","addDocumentsFromString","contentType","addDocumentsInBatches","batchSize","updates","i","length","slice","updateDocuments","updateDocumentsInBatches","updateDocumentsFromString","deleteDocument","deleteDocuments","isDocumentsDeletionQuery","endpoint","deleteAllDocuments","updateDocumentsByFunction","getSettings","updateSettings","settings","enqueued","resetSettings","getPagination","updatePagination","pagination","resetPagination","getSynonyms","updateSynonyms","synonyms","resetSynonyms","getStopWords","updateStopWords","stopWords","resetStopWords","getRankingRules","updateRankingRules","rankingRules","resetRankingRules","getDistinctAttribute","updateDistinctAttribute","distinctAttribute","resetDistinctAttribute","getFilterableAttributes","updateFilterableAttributes","filterableAttributes","resetFilterableAttributes","getSortableAttributes","updateSortableAttributes","sortableAttributes","resetSortableAttributes","getSearchableAttributes","updateSearchableAttributes","searchableAttributes","resetSearchableAttributes","getDisplayedAttributes","updateDisplayedAttributes","displayedAttributes","resetDisplayedAttributes","getTypoTolerance","updateTypoTolerance","typoTolerance","resetTypoTolerance","getFaceting","updateFaceting","faceting","resetFaceting","getSeparatorTokens","updateSeparatorTokens","separatorTokens","resetSeparatorTokens","getNonSeparatorTokens","updateNonSeparatorTokens","nonSeparatorTokens","resetNonSeparatorTokens","getDictionary","updateDictionary","dictionary","resetDictionary","getProximityPrecision","updateProximityPrecision","proximityPrecision","resetProximityPrecision","getEmbedders","updateEmbedders","embedders","resetEmbedders","getSearchCutoffMs","updateSearchCutoffMs","searchCutoffMs","resetSearchCutoffMs","getLocalizedAttributes","updateLocalizedAttributes","localizedAttributes","resetLocalizedAttributes","getFacetSearch","updateFacetSearch","facetSearch","resetFacetSearch","getPrefixSearch","updatePrefixSearch","prefixSearch","resetPrefixSearch","MeiliSearch","index","getIndex","getRawIndex","getIndexes","rawIndexes","getRawIndexes","indexes","createIndex","updateIndex","deleteIndex","deleteIndexIfExists","code","swapIndexes","multiSearch","queries","getKeys","getKey","keyOrUid","createKey","updateKey","deleteKey","health","isHealthy","getVersion","createDump","createSnapshot","GhostMeilisearchSearch","meilisearchHost","meilisearchApiKey","indexName","commonSearches","theme","enableHighlighting","searchFields","title","weight","highlight","plaintext","excerpt","html","enableAiSearch","aiSearchEmbedder","aiSearchLimit","state","isOpen","normalResults","aiResults","loading","selectedIndex","client","createDOMElements","applyTheme","setupColorSchemeObserver","addEventListeners","populateCommonSearches","adjustModalForScreenSize","wrapper","document","createElement","id","appendChild","modal","classList","add","innerHTML","searchInput","querySelector","closeButton","aiResultsSection","aiHitsList","normalResultsSection","normalHitsList","loadingState","emptyState","commonSearchesList","commonSearchesSection","button","textContent","addEventListener","performSearch","htmlColorScheme","documentElement","getAttribute","bodyColorScheme","pageColorScheme","remove","window","matchMedia","matches","observer","MutationObserver","mutations","mutation","attributeName","observe","attributes","attributeFilter","close","handleKeyDown","bind","querySelectorAll","el","preventDefault","open","metaKey","ctrlKey","activeElement","tagName","navigateResults","selectResult","innerWidth","style","height","maxHeight","direction","totalResults","newIndex","updateSelectedResult","resultElements","selectedElement","container","elementTop","offsetTop","elementBottom","offsetHeight","containerScrollTop","scrollTop","containerVisibleHeight","combinedResults","selectedResult","targetUrl","slug","location","href","console","warn","focus","trim","overflow","extractTextBetweenQuotes","match","baseSearchParams","limit","field","highlightPreTag","highlightPostTag","normalSearchPromise","aiSearchPromise","hits","aiSearchParams","hybrid","embedder","normalSearchParams","matchingStrategy","hasQuotes","exactPhrase","isExactMatch","searchPhrase","initialResults","lowerPhrase","toLowerCase","filteredHits","hit","all","renderResults","hitElement","_createHitElement","log","li","visibility","highlightText","terms","highlightedText","term","escapedTerm","replace","regex","RegExp","queryTerms","split","w","link","pointerEvents","resultItem","titleContent","excerptContent","formattedTitle","_formatted","_highlightResult","phraseToHighlight","wordsToHighlight","a","b","firstMatchPos","matchLength","lowerTextContent","pos","indexOf","word","lowerWord","tempExcerpt","snippetRadius","startPos","Math","max","endPos","min","substring","__MS_SEARCH_CONFIG__","ghostMeilisearchSearch","initialize"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12]}